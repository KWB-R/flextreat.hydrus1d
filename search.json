[{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_no-irrigation.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"Modelling with R: No Irrigation (2017-05-01 - 2020-10-31)","text":"","code":"# Enable this universe options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org')) # Install R package install.packages('flextreat.hydrus1d')"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_no-irrigation.html","id":"define-paths","dir":"Articles","previous_headings":"","what":"Define Paths","title":"Modelling with R: No Irrigation (2017-05-01 - 2020-10-31)","text":"","code":"paths_list <- list(   extdata = system.file(\"extdata\", package = \"flextreat.hydrus1d\"),   exe_dir = \"<extdata>/model\",   model_name = \"test\",   model_dir = \"<exe_dir>/<model_name>\",   scenario = \"status-quo_no-irrigation\",   atmosphere = \"<model_dir>/ATMOSPH.IN\",   a_level = \"<model_dir>/A_LEVEL.out\",   t_level = \"<model_dir>/T_LEVEL.out\",   runinf = \"<model_dir>/Run_Inf.out\",   solute_id = 1,    solute = \"<model_dir>/solute<solute_id>.out\",   soil_data = \"<extdata>/input-data/soil/soil_geolog.csv\" )  paths <- kwb.utils::resolve(paths_list)"},{"path":[]},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_no-irrigation.html","id":"soil","dir":"Articles","previous_headings":"Input Data","what":"Soil","title":"Modelling with R: No Irrigation (2017-05-01 - 2020-10-31)","text":"Soil data derived depth-dependent grain-size analysis soil samples taken Braunschweig. following required input parameters van Genuchten model used HYDRUS1D derived using pedotransfer function ROSETTA-API version 3, developed Zhang Schaap, 2017. Due similar soil characteristics, two different layers (column layer_id) defined: - layer 1: ranging 0 cm - 55 cm depth - layer 2: ranging 55 cm - 210 cm depth spatially aggregation layer (geometric mean) input parameters van Genuchten model performed code shown subsequent table.","code":"library(flextreat.hydrus1d)  soil_dat <- readr::read_csv(paths$soil_data, show_col_types = FALSE) %>%    dplyr::mutate(layer_id = dplyr::if_else(.data$tiefe_cm_ende < 60,                                         1,                                         2),                 thickness_cm = .data$tiefe_cm_ende - .data$tiefe_cm_start,                 sand = .data$S_prozent + .data$G_prozent,                  silt = .data$U_prozent,                  clay = round(100 - .data$sand - .data$silt,                                      1)) %>%    dplyr::mutate(clay = dplyr::if_else(.data$clay < 0,                                       0,                                        .data$clay)) %>%    soilDB:::ROSETTA(vars = c(\"sand\", \"silt\", \"clay\"),                    v = \"3\") %>%    dplyr::mutate(alpha = 10^.data$alpha,                 npar = 10^.data$npar,                  ksat = 10^.data$ksat)   knitr::kable(soil_dat) soil_dat_per_layer <- soil_dat %>%    dplyr::group_by(.data$layer_id) %>%    dplyr::summarise(layer_thickness = max(.data$tiefe_cm_ende) - min(.data$tiefe_cm_start),                    theta_r = sum(.data$theta_r*.data$thickness_cm)/.data$layer_thickness,                    theta_s = sum(.data$theta_s*.data$thickness_cm)/.data$layer_thickness,                    alpha = sum(.data$alpha*.data$thickness_cm)/.data$layer_thickness,                    npar = sum(.data$npar*.data$thickness_cm)/.data$layer_thickness,                    ksat = sum(.data$ksat*.data$thickness_cm)/.data$layer_thickness)   knitr::kable(soil_dat_per_layer)"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_no-irrigation.html","id":"atmospheric-boundary-conditions","dir":"Articles","previous_headings":"Input Data","what":"Atmospheric Boundary Conditions","title":"Modelling with R: No Irrigation (2017-05-01 - 2020-10-31)","text":"total three different atmospheric input boundary conditions (precipitation, potential evaporation irrigation) used within HYDRUS1D model described following subchapters detail.","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_no-irrigation.html","id":"rainfall","dir":"Articles","previous_headings":"Input Data > Atmospheric Boundary Conditions","what":"Rainfall","title":"Modelling with R: No Irrigation (2017-05-01 - 2020-10-31)","text":"Rainfall based historical hourly raw data downloaded DWD open-data ftp server station_id = 662 (.e. Braunschweig). Data aggregated within R daily sums using code :","code":"install.packages(\"rdwd\") library(dplyr) rdwd::updateRdwd()  rdwd::findID(\"Braunschweig\") rdwd::selectDWD(name = \"Braunschweig\", res = \"daily\")  url_bs_rain <- rdwd::selectDWD(name = \"Braunschweig\",                                res = \"hourly\",                                var = \"precipitation\",                                per = \"historical\" )  bs_rain <- rdwd::dataDWD(url_bs_rain)  precipitation_hourly <- rdwd::dataDWD(url_bs_rain) %>%   dplyr::select(.data$MESS_DATUM, .data$R1) %>%   dplyr::rename(\"datetime\" = \"MESS_DATUM\",                 \"precipitation_mm\" = \"R1\")  usethis::use_data(precipitation_hourly)   precipitation_daily <- precipitation_hourly %>%   dplyr::mutate(\"date\" = as.Date(datetime)) %>%   dplyr::group_by(date) %>%   dplyr::summarise(rain_mm = sum(precipitation_mm))  usethis::use_data(precipitation_daily) DT::datatable(head(flextreat.hydrus1d::precipitation_daily))"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_no-irrigation.html","id":"potential-evaporation","dir":"Articles","previous_headings":"Input Data > Atmospheric Boundary Conditions","what":"Potential Evaporation","title":"Modelling with R: No Irrigation (2017-05-01 - 2020-10-31)","text":"based daily potential evaporation grids (1km x 1km) downloaded DWD open-data server, grids (.e. 46) within Abwasserverregnungsgebiet.shp selected spatially aggregated (mean, sd, min, max) using code :","code":"shape_file <- system.file(\"extdata/input-data/gis/Abwasserverregnungsgebiet.shp\",                           package = \"flextreat.hydrus1d\")  # Only data of full months can currently be read! evapo_p <- kwb.dwd::read_daily_data_over_shape(   file = shape_file,   variable = \"evapo_p\",   from = \"201701\",   to = \"202012\" )  usethis::use_data(evapo_p) DT::datatable(head(flextreat.hydrus1d::evapo_p))"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_no-irrigation.html","id":"irrigation","dir":"Articles","previous_headings":"Input Data > Atmospheric Boundary Conditions","what":"Irrigation","title":"Modelling with R: No Irrigation (2017-05-01 - 2020-10-31)","text":"Monthly irrigation volumes provided Abwasserverband Braunschweig time period 2017-01-01 - 2023-12-31 csv file separates two sources (groundwater clearwater). Data preparation carried code :","code":"irrigation_file <- system.file(\"extdata/input-data/Beregnungsmengen_AVB.csv\",                           package = \"flextreat.hydrus1d\")   # irrigation_area <- rgdal::readOGR(dsn = shape_file)  # irrigation_area_sqm <- irrigation_area$area  # 44111068m2  ## 2700ha (https://www.abwasserverband-bs.de/de/was-wir-machen/verregnung/) irrigation_area_sqm <- 27000000  irrigation <- read.csv2(irrigation_file) %>%   dplyr::select(- .data$Monat) %>%   dplyr::rename(irrigation_m3 = .data$Menge_m3,                 source = .data$Typ,                 month = .data$Monat_num,                 year = .data$Jahr) %>%   dplyr::mutate(date_start = as.Date(sprintf(\"%d-%02d-01\",                                .data$year,                                .data$month)),                 days_in_month = as.numeric(lubridate::days_in_month(.data$date_start)),                 date_end =  as.Date(sprintf(\"%d-%02d-%02d\",                                             .data$year,                                             .data$month,                                             .data$days_in_month)),                 source = kwb.utils::multiSubstitute(.data$source,                                                     replacements = list(\"Grundwasser\" = \"groundwater.mmPerDay\",                                                                         \"Klarwasser\" = \"clearwater.mmPerDay\")),                 irrigation_cbmPerDay = .data$irrigation_m3/.data$days_in_month,                 irrigation_area_sqm = irrigation_area_sqm,                 irrigation_mmPerDay = 1000*irrigation_cbmPerDay/irrigation_area_sqm) %>%   dplyr::select(.data$year,                 .data$month,                 .data$days_in_month,                 .data$date_start,                 .data$date_end,                 .data$source,                 .data$irrigation_mmPerDay,                 .data$irrigation_area_sqm) %>%   tidyr::pivot_wider(names_from = .data$source,                      values_from = .data$irrigation_mmPerDay)  usethis::use_data(irrigation) DT::datatable(head(flextreat.hydrus1d::irrigation))"},{"path":[]},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_no-irrigation.html","id":"modify-input-files","dir":"Articles","previous_headings":"HYDRUS-1D","what":"Modify Input Files","title":"Modelling with R: No Irrigation (2017-05-01 - 2020-10-31)","text":"model input files initially setup using HYDRUS1D-GUI following modified manually ","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_no-irrigation.html","id":"selector-in","dir":"Articles","previous_headings":"HYDRUS-1D > Modify Input Files","what":"SELECTOR.in","title":"Modelling with R: No Irrigation (2017-05-01 - 2020-10-31)","text":"Soil input data entered manually SELECTOR.two layers defined second table Chapter: Input Data - Soil.","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_no-irrigation.html","id":"atmosphere-in","dir":"Articles","previous_headings":"HYDRUS-1D > Modify Input Files","what":"ATMOSPHERE.in","title":"Modelling with R: No Irrigation (2017-05-01 - 2020-10-31)","text":"Based atmospheric input data (see Chapter: Atmospheric Boundary Conditions) ATMOSPHERE.file HYDRUS1D prepared code starts hydrological summer half year (assumption: soil fully wetted end winter half year):  selected time period covers 2374 days (2017-05-01 - 2023-10-31), .e. covers 13 hydrological half years. time-series converted function flextreat.hydrus1d::prepare_atmosphere() data format required HYDRUS1D. Due fact, irrigation rates (.e. sum clearwater.mmPerDay groundwater.mmPerDay) entered separately input column within HYDRUS1D, simply added th prec (.e. precipitation) column. whole time series defined ATMOSPHERE.shown :","code":"atm <- flextreat.hydrus1d::prepare_atmosphere_data() ### Set irrigation to 0 mm/day  atm$groundwater.mmPerDay <- 0  atm$clearwater.mmPerDay <- 0  atm_selected <- flextreat.hydrus1d::select_hydrologic_years(atm)  atm_selected_hydro_wide <- flextreat.hydrus1d::aggregate_atmosphere(atm_selected, \"wide\")  DT::datatable(atm_selected_hydro_wide) atm_selected_hydro_long <- flextreat.hydrus1d::aggregate_atmosphere(atm_selected, \"long\")   atm_hydro_plot <- flextreat.hydrus1d::plot_atmosphere(atm_selected_hydro_long) atm_hydro_plot kwb.utils::preparePdf(pdfFile = sprintf(\"boundaries-temporal_%s.pdf\",                                          paths$scenario),                                          width.cm = 18, height.cm = 10) #> [1] \"boundaries-temporal_status-quo_no-irrigation.pdf\" atm_hydro_plot dev.off() #> agg_png  #>       2  atm_prep <- flextreat.hydrus1d::prepare_atmosphere(   atm_selected,    conc_irrig_clearwater = 0, # use as \"clearwater\" tracer    conc_irrig_groundwater = 0,    conc_rain = 1)  atmos <- kwb.hydrus1d::write_atmosphere(   atm = atm_prep,   MaxAL = nrow(atm_prep),   round_digits = 6 # increase precision for \"clearwater\" tracer!   )  writeLines(atmos, paths$atmosphere) DT::datatable(atm_selected) DT::datatable(atm_prep)"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_no-irrigation.html","id":"run-model","dir":"Articles","previous_headings":"HYDRUS-1D","what":"Run Model","title":"Modelling with R: No Irrigation (2017-05-01 - 2020-10-31)","text":"Finally model run automatically using following code:","code":"exe_path <- kwb.hydrus1d::check_hydrus_exe(dir = paths$exe_dir,                                            skip_preinstalled = TRUE) #> Checking if download of HYDRUS1D executable v4.17.0140 from 'https://github.com/mrustl/hydrus1d/archive/refs/tags/v4.17.0140.zip' was successful ... ok. (0.00 secs) kwb.hydrus1d:::run_model(exe_path = exe_path,                          model_path = paths$model_dir) #> Warning in shell(cmd = sprintf(\"cd %s && %s\", fs::path_abs(target_dir), : 'cd #> D:/a/_temp/Library/flextreat.hydrus1d/extdata/model && H1D_CALC.exe' execution #> failed with error code 24"},{"path":[]},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_no-irrigation.html","id":"numerical-solution","dir":"Articles","previous_headings":"HYDRUS-1D > Read Results","what":"Numerical Solution","title":"Modelling with R: No Irrigation (2017-05-01 - 2020-10-31)","text":"","code":"runinf <- kwb.hydrus1d::read_runinf(paths$runinf)  summary(runinf) #>     t_level           time               dt               itr_w        #>  Min.   :    1   Min.   :   0.05   Min.   :0.001499   Min.   : 2.000   #>  1st Qu.: 6276   1st Qu.: 273.95   1st Qu.:0.020875   1st Qu.: 2.000   #>  Median :12552   Median : 631.94   Median :0.041336   Median : 2.000   #>  Mean   :12552   Mean   : 617.76   Mean   :0.050950   Mean   : 2.491   #>  3rd Qu.:18828   3rd Qu.: 942.25   3rd Qu.:0.092031   3rd Qu.: 2.000   #>  Max.   :25103   Max.   :1279.00   Max.   :0.100000   Max.   :20.000   #>      itr_c       it_cum          kod_t             kod_b    converg        #>  Min.   :1   Min.   :    4   Min.   :-4.0000   Min.   :-5   Mode:logical   #>  1st Qu.:1   1st Qu.:21222   1st Qu.:-4.0000   1st Qu.:-5   TRUE:25103     #>  Median :1   Median :40811   Median : 4.0000   Median :-5                  #>  Mean   :1   Mean   :41374   Mean   : 0.7293   Mean   :-5                  #>  3rd Qu.:1   3rd Qu.:61905   3rd Qu.: 4.0000   3rd Qu.:-5                  #>  Max.   :1   Max.   :81864   Max.   : 4.0000   Max.   :-5                  #>      peclet       courant        #>  Min.   :0.1   Min.   :0.00100   #>  1st Qu.:0.1   1st Qu.:0.01200   #>  Median :0.1   Median :0.02800   #>  Mean   :0.1   Mean   :0.06946   #>  3rd Qu.:0.1   3rd Qu.:0.09000   #>  Max.   :0.1   Max.   :0.99500"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_no-irrigation.html","id":"water-balance","dir":"Articles","previous_headings":"HYDRUS-1D > Read Results","what":"Water Balance","title":"Modelling with R: No Irrigation (2017-05-01 - 2020-10-31)","text":"","code":"t_level <- kwb.hydrus1d::read_tlevel(paths$t_level) t_level #> # A tibble: 25,103 × 22 #>     time r_top r_root  v_top v_root    v_bot sum_r_top sum_r_root sum_v_top #>  * <dbl> <dbl>  <dbl>  <dbl>  <dbl>    <dbl>     <dbl>      <dbl>     <dbl> #>  1 0.05  0.240      0 0.240       0 -0.00173    0.0120          0    0.0120 #>  2 0.1   0.240      0 0.240       0 -0.00173    0.0240          0    0.0240 #>  3 0.15  0.240      0 0.240       0 -0.00173    0.0360          0    0.0360 #>  4 0.168 0.240      0 0.240       0 -0.00173    0.0404          0    0.0404 #>  5 0.175 0.240      0 0.240       0 -0.00173    0.0420          0    0.0420 #>  6 0.182 0.240      0 0.118       0 -0.00173    0.0438          0    0.0429 #>  7 0.190 0.240      0 0.107       0 -0.00173    0.0455          0    0.0436 #>  8 0.198 0.240      0 0.0936      0 -0.00173    0.0475          0    0.0444 #>  9 0.207 0.240      0 0.0911      0 -0.00173    0.0496          0    0.0452 #> 10 0.217 0.240      0 0.0832      0 -0.00173    0.0520          0    0.0460 #> # ℹ 25,093 more rows #> # ℹ 13 more variables: sum_v_root <dbl>, sum_v_bot <dbl>, h_top <dbl>, #> #   h_root <dbl>, h_bot <dbl>, run_off <dbl>, sum_run_off <dbl>, volume <dbl>, #> #   sum_infil <dbl>, sum_evap <dbl>, t_level <dbl>, cum_w_trans <dbl>, #> #   snow_layer <dbl>  ## t_level aggregate tlevel_aggr_date <- flextreat.hydrus1d::aggregate_tlevel(t_level) tlevel_aggr_yearmonth <- flextreat.hydrus1d::aggregate_tlevel(t_level,                                                                col_aggr = \"yearmonth\") tlevel_aggr_year_hydrologic <- flextreat.hydrus1d::aggregate_tlevel(t_level,                                                                      col_aggr = \"year_hydrologic\") %>%    dplyr::filter(.data$diff_time >= 364) ### filter out as only may-october  DT::datatable(tlevel_aggr_year_hydrologic) wb_date_plot <- flextreat.hydrus1d::plot_waterbalance(tlevel_aggr_date) wb_yearmonth_plot <- flextreat.hydrus1d::plot_waterbalance(tlevel_aggr_yearmonth) wb_yearhydrologic_plot <- flextreat.hydrus1d::plot_waterbalance(tlevel_aggr_year_hydrologic)  wb_date_plot wb_yearmonth_plot wb_yearhydrologic_plot kwb.utils::preparePdf(pdfFile = sprintf(\"water-balance_yearmonth_%s.pdf\",                                          paths$scenario),                                          width.cm = 19, height.cm = 10) #> [1] \"water-balance_yearmonth_status-quo_no-irrigation.pdf\" wb_yearmonth_plot dev.off() #> agg_png  #>       2  saveRDS(wb_yearmonth_plot,          file = sprintf(\"wb_yearmonth_%s.Rds\", paths$scenario)) plotly::ggplotly(wb_date_plot) plotly::ggplotly(wb_yearmonth_plot) a_level <- kwb.hydrus1d::read_alevel(paths$a_level) a_level #> # A tibble: 1,279 × 10 #>     time sum_r_top sum_r_root sum_v_top sum_v_root sum_v_bot     h_top h_root #>  * <dbl>     <dbl>      <dbl>     <dbl>      <dbl>     <dbl>     <dbl>  <dbl> #>  1     1    0.240           0   0.0698           0  -0.00173 -100000        0 #>  2     2   -0.123           0  -0.293            0  -0.00346     -86.9      0 #>  3     3    0.0881          0  -0.104            0  -0.00520 -100000        0 #>  4     4    0.0559          0  -0.136            0  -0.00693    -136.       0 #>  5     5    0.180           0  -0.0573           0  -0.00866 -100000        0 #>  6     6    0.427           0  -0.0378           0  -0.0104  -100000        0 #>  7     7    0.639           0  -0.0243           0  -0.0121  -100000        0 #>  8     8    0.736           0  -0.0145           0  -0.0139  -100000        0 #>  9     9    0.955           0  -0.00570          0  -0.0156  -100000        0 #> 10    10    1.24            0   0.00271          0  -0.0173  -100000        0 #> # ℹ 1,269 more rows #> # ℹ 2 more variables: h_bot <dbl>, a_level <dbl>"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_r.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"Modelling with R: Status Quo (2017-05-01 - 2020-10-31)","text":"","code":"# Enable this universe options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org')) # Install R package install.packages('flextreat.hydrus1d')"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_r.html","id":"define-paths","dir":"Articles","previous_headings":"","what":"Define Paths","title":"Modelling with R: Status Quo (2017-05-01 - 2020-10-31)","text":"","code":"paths_list <- list(   extdata = system.file(\"extdata\", package = \"flextreat.hydrus1d\"),   exe_dir = \"<extdata>/model\",   scenario = \"status-quo\",   model_name = \"test\",   model_dir = \"<exe_dir>/<model_name>\",   atmosphere = \"<model_dir>/ATMOSPH.IN\",   a_level = \"<model_dir>/A_LEVEL.out\",   t_level = \"<model_dir>/T_LEVEL.out\",   runinf = \"<model_dir>/Run_Inf.out\",   solute_id = 1,    solute = \"<model_dir>/solute<solute_id>.out\",   soil_data = \"<extdata>/input-data/soil/soil_geolog.csv\" )  paths <- kwb.utils::resolve(paths_list)"},{"path":[]},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_r.html","id":"soil","dir":"Articles","previous_headings":"Input Data","what":"Soil","title":"Modelling with R: Status Quo (2017-05-01 - 2020-10-31)","text":"Soil data derived depth-dependent grain-size analysis soil samples taken Braunschweig. following required input parameters van Genuchten model used HYDRUS1D derived using pedotransfer function ROSETTA-API version 3, developed Zhang Schaap, 2017. Due similar soil characteristics, two different layers (column layer_id) defined: - layer 1: ranging 0 cm - 55 cm depth - layer 2: ranging 55 cm - 210 cm depth spatially aggregation layer (geometric mean) input parameters van Genuchten model performed code shown subsequent table.","code":"library(flextreat.hydrus1d)  soil_dat <- readr::read_csv(paths$soil_data, show_col_types = FALSE) %>%    dplyr::mutate(layer_id = dplyr::if_else(.data$tiefe_cm_ende < 60,                                         1,                                         2),                 thickness_cm = .data$tiefe_cm_ende - .data$tiefe_cm_start,                 sand = .data$S_prozent + .data$G_prozent,                  silt = .data$U_prozent,                  clay = round(100 - .data$sand - .data$silt,                                      1)) %>%    dplyr::mutate(clay = dplyr::if_else(.data$clay < 0,                                       0,                                        .data$clay)) %>%    soilDB:::ROSETTA(vars = c(\"sand\", \"silt\", \"clay\"),                    v = \"3\") %>%    dplyr::mutate(alpha = 10^.data$alpha,                 npar = 10^.data$npar,                  ksat = 10^.data$ksat)   knitr::kable(soil_dat) soil_dat_per_layer <- soil_dat %>%    dplyr::group_by(.data$layer_id) %>%    dplyr::summarise(layer_thickness = max(.data$tiefe_cm_ende) - min(.data$tiefe_cm_start),                    theta_r = sum(.data$theta_r*.data$thickness_cm)/.data$layer_thickness,                    theta_s = sum(.data$theta_s*.data$thickness_cm)/.data$layer_thickness,                    alpha = sum(.data$alpha*.data$thickness_cm)/.data$layer_thickness,                    npar = sum(.data$npar*.data$thickness_cm)/.data$layer_thickness,                    ksat = sum(.data$ksat*.data$thickness_cm)/.data$layer_thickness)   knitr::kable(soil_dat_per_layer)"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_r.html","id":"atmospheric-boundary-conditions","dir":"Articles","previous_headings":"Input Data","what":"Atmospheric Boundary Conditions","title":"Modelling with R: Status Quo (2017-05-01 - 2020-10-31)","text":"total three different atmospheric input boundary conditions (precipitation, potential evaporation irrigation) used within HYDRUS1D model described following subchapters detail.","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_r.html","id":"rainfall","dir":"Articles","previous_headings":"Input Data > Atmospheric Boundary Conditions","what":"Rainfall","title":"Modelling with R: Status Quo (2017-05-01 - 2020-10-31)","text":"Rainfall based historical hourly raw data downloaded DWD open-data ftp server station_id = 662 (.e. Braunschweig). Data aggregated within R daily sums using code :","code":"install.packages(\"rdwd\") library(dplyr) rdwd::updateRdwd()  rdwd::findID(\"Braunschweig\") rdwd::selectDWD(name = \"Braunschweig\", res = \"daily\")  url_bs_rain <- rdwd::selectDWD(name = \"Braunschweig\",                                res = \"hourly\",                                var = \"precipitation\",                                per = \"historical\" )  bs_rain <- rdwd::dataDWD(url_bs_rain)  precipitation_hourly <- rdwd::dataDWD(url_bs_rain) %>%   dplyr::select(.data$MESS_DATUM, .data$R1) %>%   dplyr::rename(\"datetime\" = \"MESS_DATUM\",                 \"precipitation_mm\" = \"R1\")  usethis::use_data(precipitation_hourly)   precipitation_daily <- precipitation_hourly %>%   dplyr::mutate(\"date\" = as.Date(datetime)) %>%   dplyr::group_by(date) %>%   dplyr::summarise(rain_mm = sum(precipitation_mm))  usethis::use_data(precipitation_daily) DT::datatable(head(flextreat.hydrus1d::precipitation_daily))"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_r.html","id":"potential-evaporation","dir":"Articles","previous_headings":"Input Data > Atmospheric Boundary Conditions","what":"Potential Evaporation","title":"Modelling with R: Status Quo (2017-05-01 - 2020-10-31)","text":"based daily potential evaporation grids (1km x 1km) downloaded DWD open-data server, grids (.e. 46) within Abwasserverregnungsgebiet.shp selected spatially aggregated (mean, sd, min, max) using code :","code":"shape_file <- system.file(\"extdata/input-data/gis/Abwasserverregnungsgebiet.shp\",                           package = \"flextreat.hydrus1d\")  # Only data of full months can currently be read! evapo_p <- kwb.dwd::read_daily_data_over_shape(   file = shape_file,   variable = \"evapo_p\",   from = \"201701\",   to = \"202012\" )  usethis::use_data(evapo_p) DT::datatable(head(flextreat.hydrus1d::evapo_p))"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_r.html","id":"irrigation","dir":"Articles","previous_headings":"Input Data > Atmospheric Boundary Conditions","what":"Irrigation","title":"Modelling with R: Status Quo (2017-05-01 - 2020-10-31)","text":"Monthly irrigation volumes provided Abwasserverband Braunschweig time period 2017-01-01 - 2023-12-31 csv file separates two sources (groundwater clearwater). Data preparation carried code :","code":"irrigation_file <- system.file(\"extdata/input-data/Beregnungsmengen_AVB.csv\",                           package = \"flextreat.hydrus1d\")   # irrigation_area <- rgdal::readOGR(dsn = shape_file)  # irrigation_area_sqm <- irrigation_area$area  # 44111068m2  ## 2700ha (https://www.abwasserverband-bs.de/de/was-wir-machen/verregnung/) irrigation_area_sqm <- 27000000  irrigation <- read.csv2(irrigation_file) %>%   dplyr::select(- .data$Monat) %>%   dplyr::rename(irrigation_m3 = .data$Menge_m3,                 source = .data$Typ,                 month = .data$Monat_num,                 year = .data$Jahr) %>%   dplyr::mutate(date_start = as.Date(sprintf(\"%d-%02d-01\",                                .data$year,                                .data$month)),                 days_in_month = as.numeric(lubridate::days_in_month(.data$date_start)),                 date_end =  as.Date(sprintf(\"%d-%02d-%02d\",                                             .data$year,                                             .data$month,                                             .data$days_in_month)),                 source = kwb.utils::multiSubstitute(.data$source,                                                     replacements = list(\"Grundwasser\" = \"groundwater.mmPerDay\",                                                                         \"Klarwasser\" = \"clearwater.mmPerDay\")),                 irrigation_cbmPerDay = .data$irrigation_m3/.data$days_in_month,                 irrigation_area_sqm = irrigation_area_sqm,                 irrigation_mmPerDay = 1000*irrigation_cbmPerDay/irrigation_area_sqm) %>%   dplyr::select(.data$year,                 .data$month,                 .data$days_in_month,                 .data$date_start,                 .data$date_end,                 .data$source,                 .data$irrigation_mmPerDay,                 .data$irrigation_area_sqm) %>%   tidyr::pivot_wider(names_from = .data$source,                      values_from = .data$irrigation_mmPerDay)   usethis::use_data(irrigation) DT::datatable(head(flextreat.hydrus1d::irrigation))"},{"path":[]},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_r.html","id":"modify-input-files","dir":"Articles","previous_headings":"HYDRUS-1D","what":"Modify Input Files","title":"Modelling with R: Status Quo (2017-05-01 - 2020-10-31)","text":"model input files initially setup using HYDRUS1D-GUI following modified manually ","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_r.html","id":"selector-in","dir":"Articles","previous_headings":"HYDRUS-1D > Modify Input Files","what":"SELECTOR.in","title":"Modelling with R: Status Quo (2017-05-01 - 2020-10-31)","text":"Soil input data entered manually SELECTOR.two layers defined second table Chapter: Input Data - Soil.","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_r.html","id":"atmosphere-in","dir":"Articles","previous_headings":"HYDRUS-1D > Modify Input Files","what":"ATMOSPHERE.in","title":"Modelling with R: Status Quo (2017-05-01 - 2020-10-31)","text":"Based atmospheric input data (see Chapter: Atmospheric Boundary Conditions) ATMOSPHERE.file HYDRUS1D prepared code starts hydrological summer half year (assumption: soil fully wetted end winter half year):  selected time period covers 2374 days (2017-05-01 - 2023-10-31), .e. covers 13 hydrological half years. time-series converted function flextreat.hydrus1d::prepare_atmosphere() data format required HYDRUS1D. Due fact, irrigation rates (.e. sum clearwater.mmPerDay groundwater.mmPerDay) entered separately input column within HYDRUS1D, simply added th prec (.e. precipitation) column. whole time series defined ATMOSPHERE.shown :","code":"atm <- flextreat.hydrus1d::prepare_atmosphere_data() atm_selected <- flextreat.hydrus1d::select_hydrologic_years(atm)  atm_selected_hydro_wide <- flextreat.hydrus1d::aggregate_atmosphere(atm_selected, \"wide\")  DT::datatable(atm_selected_hydro_wide) atm_selected_hydro_long <- flextreat.hydrus1d::aggregate_atmosphere(atm_selected, \"long\")   atm_hydro_plot <- flextreat.hydrus1d::plot_atmosphere(atm_selected_hydro_long) atm_hydro_plot kwb.utils::preparePdf(pdfFile = sprintf(\"boundaries-temporal_%s.pdf\",                                          paths$scenario),                                          width.cm = 18, height.cm = 10) #> [1] \"boundaries-temporal_status-quo.pdf\" atm_hydro_plot dev.off() #> agg_png  #>       2   atm_prep <- flextreat.hydrus1d::prepare_atmosphere(   atm_selected,    conc_irrig_clearwater = 1, # use as \"clearwater\" tracer    conc_irrig_groundwater = 0,    conc_rain = 0)  atmos <- kwb.hydrus1d::write_atmosphere(   atm = atm_prep,   MaxAL = nrow(atm_prep),   round_digits = 6 # increase precision for \"clearwater\" tracer!   )  writeLines(atmos, paths$atmosphere) DT::datatable(atm_selected) DT::datatable(atm_prep)"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_r.html","id":"run-model","dir":"Articles","previous_headings":"HYDRUS-1D","what":"Run Model","title":"Modelling with R: Status Quo (2017-05-01 - 2020-10-31)","text":"Finally model run automatically using following code:","code":"exe_path <- kwb.hydrus1d::check_hydrus_exe(dir = paths$exe_dir,                                            skip_preinstalled = TRUE) #> Checking if download of HYDRUS1D executable v4.17.0140 from 'https://github.com/mrustl/hydrus1d/archive/refs/tags/v4.17.0140.zip' was successful ... ok. (0.00 secs) kwb.hydrus1d:::run_model(exe_path = exe_path,                          model_path = paths$model_dir) #> Warning in shell(cmd = sprintf(\"cd %s && %s\", fs::path_abs(target_dir), : 'cd #> D:/a/_temp/Library/flextreat.hydrus1d/extdata/model && H1D_CALC.exe' execution #> failed with error code 24"},{"path":[]},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_r.html","id":"numerical-solution","dir":"Articles","previous_headings":"HYDRUS-1D > Read Results","what":"Numerical Solution","title":"Modelling with R: Status Quo (2017-05-01 - 2020-10-31)","text":"","code":"runinf <- kwb.hydrus1d::read_runinf(paths$runinf)  summary(runinf) #>     t_level           time               dt               itr_w        #>  Min.   :    1   Min.   :   0.05   Min.   :0.001525   Min.   : 2.000   #>  1st Qu.: 5595   1st Qu.: 297.29   1st Qu.:0.025572   1st Qu.: 2.000   #>  Median :11188   Median : 629.35   Median :0.055000   Median : 2.000   #>  Mean   :11188   Mean   : 622.06   Mean   :0.057159   Mean   : 2.454   #>  3rd Qu.:16782   3rd Qu.: 953.83   3rd Qu.:0.096046   3rd Qu.: 2.000   #>  Max.   :22376   Max.   :1279.00   Max.   :0.100000   Max.   :20.000   #>      itr_c       it_cum          kod_t             kod_b    converg        #>  Min.   :1   Min.   :    3   Min.   :-4.0000   Min.   :-5   Mode:logical   #>  1st Qu.:1   1st Qu.:17337   1st Qu.:-4.0000   1st Qu.:-5   TRUE:22376     #>  Median :1   Median :33876   Median :-4.0000   Median :-5                  #>  Mean   :1   Mean   :34340   Mean   :-0.7447   Mean   :-5                  #>  3rd Qu.:1   3rd Qu.:50978   3rd Qu.: 4.0000   3rd Qu.:-5                  #>  Max.   :1   Max.   :68153   Max.   : 4.0000   Max.   :-5                  #>      peclet       courant        #>  Min.   :0.1   Min.   :0.00100   #>  1st Qu.:0.1   1st Qu.:0.02100   #>  Median :0.1   Median :0.05500   #>  Mean   :0.1   Mean   :0.09919   #>  3rd Qu.:0.1   3rd Qu.:0.14600   #>  Max.   :0.1   Max.   :0.98400"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_r.html","id":"conservative-tracer","dir":"Articles","previous_headings":"HYDRUS-1D > Read Results","what":"Conservative Tracer","title":"Modelling with R: Status Quo (2017-05-01 - 2020-10-31)","text":"","code":"solute <- kwb.hydrus1d::read_solute(paths$solute)   solute_date <- flextreat.hydrus1d::aggregate_solute(solute,                                                      col_aggr = \"date\")  solute_yearmonth <- flextreat.hydrus1d::aggregate_solute(solute,                                                           col_aggr = \"yearmonth\") solute_year_hydrologic <- flextreat.hydrus1d::aggregate_solute(solute,                                                                col_aggr = \"year_hydrologic\") %>%   dplyr::filter(.data$diff_time >= 364) ### filter out as only may-october  DT::datatable(solute_year_hydrologic) solute_date_plot <- flextreat.hydrus1d::plot_solute(solute_date) solute_yearmonth_plot <- flextreat.hydrus1d::plot_solute(solute_yearmonth)  solute_date_plot solute_yearmonth_plot kwb.utils::preparePdf(pdfFile = sprintf(\"solute_yearmonth_%s.pdf\",                                          paths$scenario),                       width.cm = 22,                        height.cm = 10) #> [1] \"solute_yearmonth_status-quo.pdf\" solute_yearmonth_plot dev.off() #> agg_png  #>       2"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_r.html","id":"water-balance","dir":"Articles","previous_headings":"HYDRUS-1D > Read Results","what":"Water Balance","title":"Modelling with R: Status Quo (2017-05-01 - 2020-10-31)","text":"","code":"t_level <- kwb.hydrus1d::read_tlevel(paths$t_level) t_level #> # A tibble: 22,376 × 22 #>     time r_top r_root  v_top v_root    v_bot sum_r_top sum_r_root sum_v_top #>  * <dbl> <dbl>  <dbl>  <dbl>  <dbl>    <dbl>     <dbl>      <dbl>     <dbl> #>  1 0.05  0.134      0 0.134       0 -0.00173   0.00668          0   0.00668 #>  2 0.1   0.134      0 0.134       0 -0.00173   0.0134           0   0.0134  #>  3 0.155 0.134      0 0.134       0 -0.00173   0.0207           0   0.0207  #>  4 0.216 0.134      0 0.134       0 -0.00173   0.0288           0   0.0288  #>  5 0.282 0.134      0 0.134       0 -0.00173   0.0377           0   0.0377  #>  6 0.354 0.134      0 0.134       0 -0.00173   0.0473           0   0.0473  #>  7 0.381 0.134      0 0.0874      0 -0.00173   0.0509           0   0.0496  #>  8 0.410 0.134      0 0.0652      0 -0.00173   0.0548           0   0.0516  #>  9 0.421 0.134      0 0.0507      0 -0.00173   0.0563           0   0.0521  #> 10 0.433 0.134      0 0.0516      0 -0.00173   0.0579           0   0.0527  #> # ℹ 22,366 more rows #> # ℹ 13 more variables: sum_v_root <dbl>, sum_v_bot <dbl>, h_top <dbl>, #> #   h_root <dbl>, h_bot <dbl>, run_off <dbl>, sum_run_off <dbl>, volume <dbl>, #> #   sum_infil <dbl>, sum_evap <dbl>, t_level <dbl>, cum_w_trans <dbl>, #> #   snow_layer <dbl>  ## t_level aggregate tlevel_aggr_date <- flextreat.hydrus1d::aggregate_tlevel(t_level) tlevel_aggr_yearmonth <- flextreat.hydrus1d::aggregate_tlevel(t_level,                                                                col_aggr = \"yearmonth\") tlevel_aggr_year_hydrologic <- flextreat.hydrus1d::aggregate_tlevel(t_level,                                                                      col_aggr = \"year_hydrologic\") %>%    dplyr::filter(.data$diff_time >= 364) ### filter out as only may-october  DT::datatable(tlevel_aggr_year_hydrologic) wb_date_plot <- flextreat.hydrus1d::plot_waterbalance(tlevel_aggr_date) wb_yearmonth_plot <- flextreat.hydrus1d::plot_waterbalance(tlevel_aggr_yearmonth) wb_yearhydrologic_plot <- flextreat.hydrus1d::plot_waterbalance(tlevel_aggr_year_hydrologic)  wb_date_plot wb_yearmonth_plot wb_yearhydrologic_plot kwb.utils::preparePdf(pdfFile = sprintf(\"water-balance_yearmonth_%s.pdf\",                                          paths$scenario),                                          width.cm = 19, height.cm = 10) #> [1] \"water-balance_yearmonth_status-quo.pdf\" wb_yearmonth_plot dev.off() #> agg_png  #>       2  saveRDS(wb_yearmonth_plot,          file = sprintf(\"wb_yearmonth_%s.Rds\", paths$scenario)) plotly::ggplotly(wb_date_plot) plotly::ggplotly(wb_yearmonth_plot) a_level <- kwb.hydrus1d::read_alevel(paths$a_level) a_level #> # A tibble: 1,279 × 10 #>     time sum_r_top sum_r_root sum_v_top sum_v_root sum_v_bot     h_top h_root #>  * <dbl>     <dbl>      <dbl>     <dbl>      <dbl>     <dbl>     <dbl>  <dbl> #>  1     1  0.134             0    0.0686          0  -0.00173 -100000        0 #>  2     2 -0.336             0   -0.401           0  -0.00346     -82.5      0 #>  3     3 -0.230             0   -0.295           0  -0.00520    -161.       0 #>  4     4 -0.369             0   -0.434           0  -0.00693     -97.5      0 #>  5     5 -0.351             0   -0.416           0  -0.00866    -122.       0 #>  6     6 -0.210             0   -0.290           0  -0.0104  -100000        0 #>  7     7 -0.104             0   -0.256           0  -0.0121  -100000        0 #>  8     8 -0.113             0   -0.265           0  -0.0139     -185.       0 #>  9     9 -0.000812          0   -0.222           0  -0.0156  -100000        0 #> 10    10  0.182             0   -0.206           0  -0.0173  -100000        0 #> # ℹ 1,269 more rows #> # ℹ 2 more variables: h_bot <dbl>, a_level <dbl>"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_scenarios.html","id":"install-r-package","dir":"Articles","previous_headings":"","what":"Install R Package","title":"Modelling with R: Scenario Analysis","text":"","code":"# Enable this universe options(repos = c(   kwbr = 'https://kwb-r.r-universe.dev',   CRAN = 'https://cloud.r-project.org')) # Install R package install.packages('flextreat.hydrus1d')"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_scenarios.html","id":"define-paths","dir":"Articles","previous_headings":"","what":"Define Paths","title":"Modelling with R: Scenario Analysis","text":"","code":"root_dir <- fs::dir_create(fs::path_abs(file.path(tempdir()))) fs::dir_copy(system.file(\"extdata/model/model_to_copy\", package = \"flextreat.hydrus1d\"),              file.path(root_dir, \"model_to_copy\"),              overwrite = TRUE)  provide_paths <- function(root_dir, config, start, end) {   #Y:\\WWT_Department\\Projects\\FlexTreat\\Work-packages\\AP3\\3_1_4_Prognosemodell\\Hydrus1D\\irrig_fixed\\irrig-period_status-quo\\long_dry\\retardation_no   tracer <- config$treatment == \"tracer\"   # Define a path grammar   PATH_GRAMMAR <- list(     exe_dir = sprintf(\"%s/<irrig_dir_string>/<duration_string><extreme_rain_string>/%s\", root_dir, config$retardation_scenario),     model_name_org = \"model_to_copy\",     model_name = \"<location>_<scenario>_soil-column_<solute_id_start><solute_id_end>\",     ###model_gui_path_org =  \"<exe_dir>/<model_name_org>.h1d\",     model_gui_path_org =  \"<model_dir_org>/<model_name_org>.h1d\",      model_gui_path = \"<exe_dir>/<model_name>.h1d\",     modelvs_gui_path = \"<exe_dir>/<model_name>_vs.h1d\",      model_dir_org = sprintf(\"%s/<model_name_org>\", root_dir),      model_dir = \"<exe_dir>/<model_name>\",     model_dir_vs = \"<exe_dir>/<model_name>_vs\",     atmosphere = \"<model_dir>/ATMOSPH.IN\",     atmosphere_vs = \"<model_dir_vs>/ATMOSPH.IN\",     a_level = \"<model_dir>/A_LEVEL.out\",     hydrus1d = \"<model_dir>/HYDRUS1D.DAT\",     selector = \"<model_dir>/SELECTOR.IN\",     profile = \"<model_dir>/PROFILE.DAT\",     obs_node = \"<model_dir>/Obs_Node.out\",     balance = \"<model_dir>/BALANCE.out\",     t_level = \"<model_dir>/T_LEVEL.out\",     t_level_vs = \"<model_dir_vs>/T_LEVEL.out\",     runinf = \"<model_dir>/Run_Inf.out\",     solute_id = \"1\",     solute = \"<model_dir>/solute<solute_id>.out\",     solute_vs = \"<model_dir_vs>/solute<solute_id>.out\",     soil_data = \"<extdata>/input-data/soil/soil_geolog.csv\",     solute_id_start = sprintf(\"%02d\", start),     solute_id_end = sprintf(\"%02d\", end),     location = if (tracer) {       \"tracer\"     } else {       sprintf(\"ablauf_%s_median\", config$treatment)     } #\"ablauf_ka_median\"   )    # Resolve the path grammar by replacing the placeholders recursively   kwb.utils::resolve(     PATH_GRAMMAR,     irrig_dir_string = ifelse(       config$irrig_only_growing_season,       \"irrig-period_growing-season\",       \"irrig-period_status-quo\"     ),     duration_string = config$duration_string,     extreme_rain_string = if (config$extreme_rain != \"\") {       paste0(\"_\", config$extreme_rain)     } else {       \"\"     },     #final_subdir = ifelse(tracer, \"tracer\", config$retardation_scenario),     scenario = config$scenario   ) }"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_scenarios.html","id":"provide-helper-functions","dir":"Articles","previous_headings":"","what":"Provide Helper Functions","title":"Modelling with R: Scenario Analysis","text":"","code":"library(magrittr) library(flextreat.hydrus1d)  # get_atm ---------------------------------------------------------------------- get_atm <- function(atm, extreme_rain = NULL) {   `%>%` <- magrittr::`%>%`    if (is.null(extreme_rain)) {     return(atm)   }    if (!extreme_rain %in% c(\"dry\", \"wet\")) {     stop(\"extreme_rain has to be either 'NULL', 'dry' or 'wet\")   }    atm <- atm %>%     dplyr::mutate(       hydrologic_year = flextreat.hydrus1d::get_hydrologic_years(date),       year = as.integer(format(date, format = \"%Y\")),       day_of_year = lubridate::yday(date)     )    atm_stats <- atm %>%     dplyr::group_by(year) %>%     dplyr::summarise(       rain_mm = sum(rain_mm, na.rm = TRUE),       evapo_p_mean_mm = sum(evapo_p_mean_mm, na.rm = TRUE)     )    if (extreme_rain == \"dry\") {      atm_dry <- atm_stats %>%       dplyr::filter(rain_mm == min(rain_mm))      atm_dry_sel <- atm %>%       dplyr::filter(year == atm_dry$year) %>%       dplyr::select(day_of_year, rain_mm)      atm_dry_input <- atm %>%       dplyr::select(- rain_mm, - hydrologic_year, - year) %>%       dplyr::left_join(atm_dry_sel) %>%       dplyr::mutate(rain_mm = dplyr::if_else(is.na(rain_mm), 0, rain_mm)) %>%       dplyr::select(- day_of_year) %>%       dplyr::relocate(rain_mm, .after = clearwater.mmPerDay)      return(atm_dry_input)   }    if (extreme_rain == \"wet\") {     atm_wet <- atm_stats %>%       dplyr::filter(rain_mm == max(rain_mm))      atm_wet_sel <- atm %>%       dplyr::filter(year == atm_wet$year) %>%       dplyr::select(day_of_year, rain_mm)      atm_wet_input <- atm %>%       dplyr::select(- rain_mm, - hydrologic_year, - year) %>%       dplyr::left_join(atm_wet_sel) %>%       dplyr::mutate(rain_mm = dplyr::if_else(is.na(rain_mm), 0, rain_mm)) %>%       dplyr::select(- day_of_year) %>%       dplyr::relocate(rain_mm, .after = clearwater.mmPerDay)      return(atm_wet_input)   } }  # prepare_solute_input --------------------------------------------------------- prepare_solute_input <- function(     dat,     selector,     Ks = NULL,     SnkL1 = NULL,     diff_w = 0, diff_g = 0,     kd = NULL,     halftime_to_firstorderrate = NULL ) {   `%>%` <- magrittr::`%>%`    stopifnot(nrow(dat) <= 10)    if (selector$solute$No.Solutes != nrow(dat)) {     selector$solute$No.Solutes <- nrow(dat)   }    solute_names <- sprintf(\"solute_%d\", seq_len(nrow(dat)))    solutes_new <- setNames(nm = solute_names, lapply(seq_len(nrow(dat)), function(i) {      dat_sel <- dat[i,]      ks <- kd(       porosity = selector$waterflow$soil$ths - selector$waterflow$soil$thr,       retardation = dat_sel$retard,       bulk_density = selector$solute$transport$Bulk.d.     )      cols <- c(       \"Ks\", \"Nu\", \"Beta\", \"Henry\", \"SnkL1\", \"SnkS1\", \"SnkG1\", \"SnkL1'\",       \"SnkS1'\", \"SnkG1'\", \"SnkL0\",  \"SnkS0\", \"SnkG0\",  \"Alfa\"     )      reaction <- matrix(data = 0, ncol = length(cols), nrow = length(ks)) %>%       as.data.frame() %>%       tibble::as_tibble()      names(reaction) <- cols     reaction$Beta <- 1      reaction$Ks <- if (is.null(Ks)) {       round(ks, 2)     } else {       Ks     }      reaction$SnkL1 <- if (is.null(SnkL1)) {       round(halftime_to_firstorderrate(dat_sel$half_life_days), 5)     } else {       SnkL1     }      list(       diffusion = tibble::tibble(DifW = diff_w, DifG = diff_g),       reaction = reaction     )    }))    sel_tmp <- selector$solute[!names(selector$solute) %in% solute_names]    solutes_new_list <- c(     sel_tmp[1:which(names(sel_tmp) == \"transport\")],     solutes_new,     sel_tmp[which(names(sel_tmp) == \"kTopSolute\"):length(sel_tmp)]   )    c(     selector[names(selector) != \"solute\"],     list(solute = solutes_new_list)   ) }  # get_mean --------------------------------------------------------------------- get_mean <- function(col) {   x <- stringr::str_split_fixed(col, \"-\", n = 2)   mode(x) <- \"numeric\"   round(rowMeans(x), digits = 2) }  # kd --------------------------------------------------------------------------- kd <- function(porosity, retardation, bulk_density) {   #https://www3.epa.gov/ceampubl/learn2model/part-two/onsite/retard.html   (retardation - 1) * porosity / bulk_density }  # halftime_to_firstorderrate --------------------------------------------------- halftime_to_firstorderrate <- function(half_time) {   if(half_time != 0) {     #https://chem.libretexts.org/Courses/Bellarmine_University/BU%3A_Chem_104_(Christianson)/Phase_2%3A_Understanding_Chemical_Reactions/4%3A_Kinetics%3A_How_Fast_Reactions_Go/4.5%3A_First_Order_Reaction_Half-Life#mjx-eqn-21.4.2     0.693 / half_time   } else {     0   } }  # provide_soil_columns --------------------------------------------------------- provide_soil_columns <- function(path) {   `%>%` <- magrittr::`%>%`    x <- openxlsx::read.xlsx(path, namedRegion = \"my_results2\") %>%     janitor::clean_names() %>%     dplyr::mutate(substanz_name = stringr::str_trim(substanz_name),                   half_life_days = dplyr::case_when(       grepl(\">\", hwz_tage) ~ hwz_tage %>%         stringr::str_remove(\">\") %>%         as.numeric() %>%         round(digits = 2),       grepl(\"<\", hwz_tage) ~ hwz_tage %>%         stringr::str_remove(\"<\") %>%         as.numeric() %>%         round(digits = 2),       grepl(\"-\", hwz_tage) ~ get_mean(hwz_tage),       .default = as.numeric(hwz_tage) %>%         round(digits = 2)),       class_id = dplyr::case_when(         half_life_days < 20 ~ \"I\",         half_life_days >= 20 & half_life_days < 200 ~ \"II\",         half_life_days >= 200 ~ \"III\"),       class_hlt = dplyr::case_when(         half_life_days < 20 ~ \"< 20 Tage\",         half_life_days >= 20 & half_life_days < 200 ~ \"20 - 200 Tage\",         half_life_days >= 200 ~ \">= 200 Tage\"),       retard = dplyr::case_when(         grepl(\"-\", retardation) ~ get_mean(retardation),         is.na(retardation) ~ 1L,         .default = as.numeric(retardation) %>%           round(digits = 2))) %>%     dplyr::filter(!is.na(half_life_days)) %>%     dplyr::mutate(id = 1:dplyr::n()) %>%     dplyr::relocate(id) # %>% dplyr::mutate(retard = 1, half_life_days = 0)    x %>%     dplyr::left_join(x %>%                        dplyr::count(class_id) %>%     dplyr::rename(class_nsubstances = n)) %>%     dplyr::mutate(class_label = sprintf(\"%s (%s, %2d Stoffe)\",                                         class_id,                                         class_hlt,                                         class_nsubstances))  }  # generate_solute_ids ---------------------------------------------------------- generate_solute_ids <- function(n) {   seq_start <- seq(1, n, 10)    seq_end <- if (n > 10) {     seq(10, n, 10)   } else {     n   }    if (length(seq_end) < length(seq_start)) {     seq_end <- c(seq_end, n)   }    tibble::tibble(     start = as.integer(seq_start),     end = as.integer(seq_end)   ) }  # generate_periods ------------------------------------------------------------- generate_periods <- function(n) {   tibble::tibble(     start = seq(1, n, 10),     end = if (n %% 10 != 0) {       c(seq(10, n, 10), n)     } else {       seq(10, n, 10)     }   ) }  # prepare_files_for_irrig_int -------------------------------------------------- prepare_files_for_irrig_int <- function(paths) {   `%>%` <- magrittr::`%>%`    p <- kwb.utils::createAccessor(paths)    copy <- function(fun, from, to) {     kwb.utils::catAndRun(       sprintf(\"Copying from\\n  %s to\\n  %s\", from, to),       fun(path = from, new_path = to)     )   }    if (!fs::dir_exists(p(\"model_dir\"))) {     copy(fs::dir_copy, from = p(\"model_dir_org\"), to = p(\"model_dir\"))   }    if (!fs::file_exists(p(\"model_gui_path\"))) {     copy(fun = fs::file_copy, from = p(\"model_gui_path_org\"), to = p(\"model_gui_path\"))   }    model_out_files <- list.files(     p(\"model_dir\"),     pattern = \"\\\\.out$\",     full.names = TRUE   )    if (length(model_out_files) > 0L) {     fs::file_delete(model_out_files)   }    soil_depth_cm <- 100 *     stringr::str_extract(p(\"model_name\"), \"soil-[0-9]+?m\") %>%     stringr::str_extract(\"[0-9]\") %>%     as.numeric()    if (soil_depth_cm != 200) {     soil_profile <- kwb.hydrus1d::read_profile(paths$profile)     profile_extended <- kwb.hydrus1d::extend_soil_profile(       soil_profile$profile,       x_end = -soil_depth_cm     )     soil_profile_extended <- soil_profile     soil_profile_extended$profile <- profile_extended     kwb.hydrus1d::write_profile(soil_profile_extended, path = p(\"profile\"))   }    string_irrig_int <- stringr::str_extract(p(\"model_dir\"), \"[0-9][0-9]?days\")    # Return the string that is used as \"irrig_interval\"   paste(     as.integer(stringr::str_extract(string_irrig_int, \"\\\\d+\")),     stringr::str_extract(string_irrig_int, \"[a-z]+\")   ) }  # sum_per_interval ------------------------------------------------------------- sum_per_interval <- function(data, interval) {   `%>%` <- magrittr::`%>%`    data_org <- data   data <- dplyr::select(data, tidyselect::all_of(     c(\"date\", \"groundwater.mmPerDay\", \"clearwater.mmPerDay\")   ))   cols_sum <- setdiff(names(data), \"date\")   data_summed <- data %>%     dplyr::mutate(       group = lubridate::floor_date(date, unit = interval)     ) %>%  # Konvertiere date in datetime-Format     dplyr::group_by(group) %>%  # Gruppiere nach Zeitintervallen     dplyr::summarise_at(       .vars = tidyselect::all_of(cols_sum),       .funs = sum     ) %>%   # Berechne die Summe für jedes Intervall     dplyr::rename(date = group)   data_org[, cols_sum] <- 0   data_org[data_org$date %in% data_summed$date, cols_sum] <- data_summed[, cols_sum]   data_org }  # get_valid_exe_path ----------------------------------------------------------- get_valid_exe_path <- function(exe_dir) {   if (file.exists(file.path(exe_dir, \"H1D_CALC.exe\"))) {     file.path(exe_dir, \"H1D_CALC.exe\")   } else {     fs::dir_create(exe_dir)     kwb.hydrus1d::check_hydrus_exe(dir = exe_dir)   } }  # inner_function --------------------------------------------------------------- inner_function <- function(config, atm_data, soil_columns, helper, root_dir) {   `%>%` <- magrittr::`%>%`    {     # Define constants     IRRIGATION_COLUMNS <- c(\"groundwater.mmPerDay\", \"clearwater.mmPerDay\")      # Provide variables from config     extreme_rain <- if (config$extreme_rain == \"\") {       NULL     } else {       config$extreme_rain     }     tracer <- config$treatment == \"tracer\"     no_retardation <- config$retardation == \"retardation_no\"      if (no_retardation) {       soil_columns$retard <- 1     }      atm <- helper(\"get_atm\")(atm_data, extreme_rain)      if (config$irrig_only_growing_season) {       atm[which(!lubridate::month(atm$date) %in% 4:9), IRRIGATION_COLUMNS] <- 0     }      if (config$duration_string == \"test\") {       atm <- dplyr::filter(atm, date >= \"2017-05-01\" & date <= \"2018-04-30\")     } else if (config$duration_string == \"short\") {       atm <- dplyr::filter(atm, date >= \"2017-05-01\" & date <= \"2020-04-30\")     } else {       atm <- dplyr::filter(atm, date >= \"2017-05-01\" & date <= \"2023-12-31\")     }      days_monthly <- lubridate::days_in_month(       seq.Date(from = min(atm$date), to = max(atm$date), by = \"month\")     )      loop_df <- if (tracer) {       helper(\"generate_periods\")(n = length(days_monthly))     } else {       helper(\"generate_solute_ids\")(n = nrow(soil_columns))     }   }    kwb.utils::catAndRun(     messageText = sprintf(       \"Running '%s' period for treatment '%s'\",       extreme_rain,       config$treatment     ),     expr = {       sapply(seq_len(nrow(loop_df)), function(i) {          #i <- 1L         {           paths <- helper(\"provide_paths\")(             root_dir,             config,             start = loop_df$start[i],             end = loop_df$end[i]           )            solute_start_id <- as.numeric(paths$solute_id_start)           solute_end_id <- as.numeric(paths$solute_id_end)           n_solutes <- solute_end_id - (solute_start_id - 1)            no_irrig <- stringr::str_detect(paths$model_dir, \"no-irrig\")           irrig_int <- stringr::str_detect(paths$model_dir, \"irrig-[0-9][0-9]?days\")         }          if (irrig_int) {           irrig_interval <- helper(\"prepare_files_for_irrig_int\")(paths)         }          # no-irrigation         if (no_irrig) {           atm[, IRRIGATION_COLUMNS] <- 0         }          if (irrig_int) {           atm <- helper(\"sum_per_interval\")(data = atm, interval = irrig_interval)         }          days_total <- cumsum(days_monthly)          indices <- seq_along(days_total)          c_tops <- lapply(indices, function(i) {            x <- rep(0, nrow(atm))           x_min <- ifelse(i == 1, 1, days_total[i - 1] + 1)           x[x_min:days_total[i]] <- rep(100, days_monthly[i])            tib <- data.frame(x)            colnames(tib) <- if (i == indices[1]) {             \"cTop\"           } else {             sprintf(\"cTop%d\", which(indices %in% i))           }            tib         }) %>% dplyr::bind_cols()          c_tops_sel <- c_tops[, paths$solute_id_start:paths$solute_id_end]          atm_prep <- if (tracer) {           flextreat.hydrus1d::prepare_atmosphere(             atm = atm,             conc_irrig_clearwater = c_tops_sel,             conc_irrig_groundwater = c_tops_sel,             conc_rain = c_tops_sel           )         } else {           flextreat.hydrus1d::prepare_atmosphere(             atm = atm,             conc_irrig_clearwater = soil_columns[solute_start_id:solute_end_id, paths$location],             conc_irrig_groundwater = 0,             conc_rain = 0           )         }          n_tsteps <- nrow(atm_prep)          writeLines(           kwb.hydrus1d::write_atmosphere(atm = atm_prep),           paths$atmosphere         )          selector <- kwb.hydrus1d::read_selector(path = paths$selector)          selector$time$tMax <- n_tsteps         selector$time$MPL <- 250          selector$time$TPrint <- seq(0, n_tsteps, n_tsteps/selector$time$MPL)          if (selector$time$TPrint[1] == 0) {           selector$time$TPrint[1] <- 1         }          solutes_new <- helper(\"prepare_solute_input\")(           dat = soil_columns[solute_start_id:solute_end_id,],           Ks = if (tracer) 0, # else NULL           SnkL1 = if (tracer) 0, # else NULL           selector = selector,           diff_w = 0,           diff_g = 0,           kd = helper(\"kd\"),           halftime_to_firstorderrate = helper(\"halftime_to_firstorderrate\")         )          kwb.hydrus1d::write_selector(solutes_new, paths$selector)          hydrus1d <- kwb.hydrus1d::read_hydrus1d(paths$hydrus1d)         hydrus1d$Main$NumberOfSolutes <- n_solutes         kwb.hydrus1d::write_hydrus1d(hydrus1d, paths$hydrus1d)          exe_path <- helper(\"get_valid_exe_path\")(paths$exe_dir)          kwb.hydrus1d::run_model(           exe_path = exe_path,           model_path = paths$model_dir,           print_output = FALSE         )          atmos <- kwb.hydrus1d::read_atmosph(paths$atmosphere)          #atmos$data[names(c_tops)] <- c_tops          atm_default <- atmos          tlevel <- kwb.hydrus1d::read_tlevel(paths$t_level)          vs_atm <- flextreat.hydrus1d::recalculate_ctop_with_virtualstorage(           atm = atm_default$data,           tlevel = tlevel,           crit_v_top = - 0.05         )          atmos$data[names(vs_atm$df)] <- vs_atm$df          fs::dir_copy(paths$model_dir, paths$model_dir_vs, overwrite = TRUE)         fs::file_copy(paths$model_gui_path, paths$modelvs_gui_path, overwrite = TRUE)          model_vs_out_files <- list.files(paths$model_dir_vs, pattern = \"\\\\.out$\", full.names = TRUE)          if (length(model_vs_out_files) > 0) {           fs::file_delete(model_vs_out_files)         }          writeLines(           kwb.hydrus1d::write_atmosphere(atm = atmos$data),           paths$atmosphere_vs         )          kwb.hydrus1d::run_model(           exe_path = exe_path,           model_path = paths$model_dir_vs,           print_output = FALSE         )        })     },     dbg = TRUE   ) }  # helper ----------------------------------------------------------------------- helper <- kwb.utils::createAccessor(list(   get_atm = get_atm,   generate_solute_ids = generate_solute_ids,   provide_paths = provide_paths,   prepare_files_for_irrig_int = prepare_files_for_irrig_int,   sum_per_interval = sum_per_interval,   prepare_solute_input = prepare_solute_input,   halftime_to_firstorderrate = halftime_to_firstorderrate,   get_valid_exe_path = get_valid_exe_path,   generate_periods = generate_periods,   kd = kd ))    # extrahiere_letzte_drei_teile -------------------------------------------------   extrahiere_letzte_drei_teile <- function(pfad)   {     sapply(pfad, function(pf) {       # Teile den Pfad anhand des Schrägstrichs auf       teile <- unlist(strsplit(pf, \"/\"))        # Waehle die letzten drei Teile aus       letzte_drei_teile <- tail(teile, 3)        paste0(letzte_drei_teile, collapse = \"_\")     })   }"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_scenarios.html","id":"select-substances-define-scenarios","dir":"Articles","previous_headings":"","what":"Select Substances & Define Scenarios","title":"Modelling with R: Scenario Analysis","text":"","code":"soil_columns <- provide_soil_columns(path = system.file(\"extdata/input-data/StofflicheModellRandbedingungen.xlsx\",                                                          package = \"flextreat.hydrus1d\")                                      ) #> Warning: There were 5 warnings in `dplyr::mutate()`. #> The first warning was: #> ℹ In argument: `half_life_days = dplyr::case_when(...)`. #> Caused by warning in `hwz_tage %>% stringr::str_remove(\">\") %>% as.numeric() %>% round(digits = 2)`: #> ! NAs introduced by coercion #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 4 remaining warnings. #> Joining with `by = join_by(class_id)`  ### Select 1 substance for 5 different half life classes defined in this table selected_substances <- readr::read_csv(system.file(\"extdata/input-data/substance_classes.csv\",                                                    package = \"flextreat.hydrus1d\")) #> Rows: 5 Columns: 3 #> ── Column specification ──────────────────────────────────────────────────────── #> Delimiter: \",\" #> chr (1): class_label #> dbl (2): class_id, substance_id #>  #> ℹ Use `spec()` to retrieve the full column specification for this data. #> ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.  soil_columns_selected <- soil_columns  %>%   dplyr::filter(substanz_nr %in% selected_substances$substance_id) %>%   dplyr::arrange(substanz_nr) %>%   dplyr::mutate(id = 1:dplyr::n())  arg_combis <- kwb.utils::expandGrid(   extreme_rain = c(\"\", \"wet\", \"dry\"), # \"\" needs to be treated as NULL!   treatment = c(\"tracer\", \"ka\", \"o3\"), # \"tracer\" # c(\"ka\", \"o3\")   scenario = unlist(lapply(c(1,10), function(x) {     paste0(\"soil-\", 1:3, sprintf(\"m_irrig-%02ddays\", x))   })),   irrig_only_growing_season = c(TRUE, FALSE),   duration_string = \"long\", #c(\"short\", \"long\"),   retardation_scenario = c(\"retardation_yes\", \"retardation_no\") )"},{"path":[]},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_scenarios.html","id":"scenario-creation","dir":"Articles","previous_headings":"Modelling","what":"Scenario Creation","title":"Modelling with R: Scenario Analysis","text":"results 144 scenarios, listed detail table .","code":"arg_combis <- kwb.utils::expandGrid(   extreme_rain = c(\"\", \"wet\", \"dry\"), # \"\" needs to be treated as NULL!   treatment = c(\"ka\", \"o3\"), # \"tracer\" # c(\"ka\", \"o3\")   scenario = unlist(lapply(c(1,10), function(x) {     paste0(\"soil-\", 1:3, sprintf(\"m_irrig-%02ddays\", x))   })),   irrig_only_growing_season = c(TRUE, FALSE),   duration_string = \"long\", #c(\"short\", \"long\"),   retardation_scenario = c(\"retardation_yes\", \"retardation_no\") )"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_scenarios.html","id":"run-the-model","dir":"Articles","previous_headings":"Modelling","what":"Run the Model","title":"Modelling with R: Scenario Analysis","text":"","code":"atm_data <- flextreat.hydrus1d::prepare_atmosphere_data()  ### Convert model scenarios into valid data structure for HYDRUs-1D modelling   configs <- lapply(seq_len(nrow(arg_combis)), function(i) {     as.list(arg_combis[i, ])   })    # system.time({   # #Sequential loop   # for (config in configs) {   #   config <- configs[[1L]]   #   inner_function(   #     config = config,   #     atm_data = atm_data,   #     soil_columns = soil_columns,   #     helper = helper,   #     root_dir = root_dir   #   )   # }   # })     system.time(expr = {   # Parallel loop   ncores <- parallel::detectCores() - 1   cl <- parallel::makeCluster(ncores)     parallel::parLapply(     cl = cl,     X = configs,     fun = inner_function,     atm_data = atm_data,     soil_columns = soil_columns,     helper = helper,     root_dir = root_dir   )    parallel::stopCluster(cl)   }   )"},{"path":[]},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_scenarios.html","id":"prepare-solutes-summary","dir":"Articles","previous_headings":"Post-Processing","what":"Prepare Solutes Summary","title":"Modelling with R: Scenario Analysis","text":"","code":"#scenarios_solutes <- paste0(scenarios, \"_soil-column\")   scenarios_solutes <- paste0(\"ablauf_\", c(\"o3\", \"ka\"), \"_median\")    scenario_dirs <- fs::dir_ls(     path =   root_dir,     recurse = TRUE,     regexp = \"retardation_no.*vs$\",     #regexp = \"irrig-period_status-quo/long/retardation_no.*vs$\",     #regexp = \"irrig-period_status-quo/long/retardation_no/ablauf_ka_median_soil-1m_irrig-01days_soil-column_0105.*vs$\",     type = \"directory\"   )    # Set up parallel plan   system.time(expr = {     # future::plan(future::multisession)      future.apply::future_sapply(scenario_dirs, function(scenario_dir) {        solutes_list <- setNames(lapply(scenarios_solutes, function(scenario) {         solute_files <- fs::dir_ls(scenario_dir,                                    regexp = \"solute\\\\d\\\\d?.out\",                                    recurse = TRUE)          stopifnot(length(solute_files) > 0)          solutes <- setNames(lapply(solute_files, function(file) {           kwb.hydrus1d::read_solute(file, dbg = TRUE)         }), nm = solute_files) %>% dplyr::bind_rows(.id = \"path\")          solute_files_df <- tibble::tibble(path = solute_files,                                           model_solute_id = path  %>%  basename() %>% stringr::str_extract(pattern = \"[0-9][0-9]?\") %>% as.integer(),                                           soilcolumn_id_start = path  %>%  dirname() %>% stringr::str_extract(pattern = \"[0-9]{4}\") %>% stringr::str_sub(1,2) %>% as.integer(),                                           soilcolumn_id_end = path  %>%  dirname() %>% stringr::str_extract(pattern = \"[0-9]{4}\") %>% stringr::str_sub(3,4) %>% as.integer(),                                           soil_column_id = soilcolumn_id_start + model_solute_id - 1) %>%           dplyr::left_join(soil_columns, by = c(soil_column_id = \"id\"))          dplyr::left_join(solutes, solute_files_df)       }), nm = scenarios_solutes)        solutes_df <- solutes_list %>%         dplyr::bind_rows(.id = \"scenario\")        solutes_df_stats <- solutes_df %>%         dplyr::bind_rows(.id = \"scenario\") %>%         dplyr::mutate(scen = stringr::str_remove(basename(dirname(path)), \"_soil-column.*\")) %>%         dplyr::group_by(path, scen,substanz_nr, substanz_name) %>%         dplyr::summarise(sum_cv_top = max(sum_cv_top),                          sum_cv_bot = min(sum_cv_bot),                          cv_ch1 = min(cv_ch1)) %>%         dplyr::mutate(mass_balance_error_percent = 100*(sum_cv_top + cv_ch1 + sum_cv_bot)/sum_cv_top) %>%         dplyr::arrange(mass_balance_error_percent)        solutes_df_stats$soil <- solutes_df_stats$sum_cv_top + solutes_df_stats$sum_cv_bot + solutes_df_stats$cv_ch1        saveRDS(solutes_df, file = file.path(scenario_dir, \"solutes.rds\"))        openxlsx::write.xlsx(solutes_df_stats, file = file.path(scenario_dir, \"hydrus_scenarios.xlsx\"))     })     # Close the parallel plan     future::plan(future::sequential)   })"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_scenarios.html","id":"create-substance-load-plots","dir":"Articles","previous_headings":"Post-Processing","what":"Create Substance Load Plots","title":"Modelling with R: Scenario Analysis","text":"","code":"sapply(sprintf(\"retardation_%s\", c(\"yes\", \"no\")), function(retardation_short) {        soil_columns_plot <- if(retardation_short == \"retardation_yes\") {     soil_columns   } else {     soil_columns %>%       dplyr::mutate(retard = 1)   }    scenario_dirs <- fs::dir_ls(     path =   root_dir,     recurse = TRUE,     regexp = sprintf(\"%s.*vs/hydrus_scenarios.xlsx$\", retardation_short),     type = \"file\"   )     res_stats <- lapply(     stats::setNames(nm = scenario_dirs),     function(scenario_dir) {       readxl::read_excel(scenario_dir)     }   )    load_default_paths <- fs::dir_ls(sprintf(\"%sirrig-period_status-quo\", root_dir),                                    recurse = TRUE,                                    regexp = sprintf(\"long/%s/ablauf_ka_median_soil-2m_irrig-10days_.*vs/hydrus_scenarios.xlsx\",  retardation_short))     load_default <-  res_stats %>%     dplyr::bind_rows(.id = \"path\") %>%     dplyr::filter(path %in% load_default_paths) %>%     dplyr::select(- path, - scen, - mass_balance_error_percent, - soil)    names(load_default)[3:5] <- paste0(\"default_\",   names(load_default)[3:5])    load_default_sum <- as.data.frame(t(abs(colSums(load_default[3:5]))))     res_stats_df <- dplyr::bind_rows(res_stats, .id = \"path\") %>%     dplyr::mutate(retardation = basename(dirname(dirname(path))),                   duration = basename(dirname(dirname(dirname(path)))),                   irrigation_period = basename(dirname(dirname(dirname(dirname((path))))))) %>%     dplyr::select(- path, - mass_balance_error_percent, - soil) %>%     tidyr::separate(col = scen, into = c(\"treatment\", \"soil_depth_irrig\"), sep = \"n_s\", remove = FALSE) %>%     dplyr::mutate(treatment = sprintf(\"%sn\", treatment),                   soil_depth_irrig = sprintf(\"s%s\", soil_depth_irrig)) %>%     tidyr::separate(col = soil_depth_irrig, into = c(\"soil_depth\", \"irrigation_intervall\"), sep = \"_\", remove = FALSE) %>%     dplyr::mutate(duration_irrigperiod = paste0(duration, \"_\", irrigation_period))     substances_per_class <- soil_columns %>%     dplyr::count(class_id)    res_stats_df_class <- res_stats_df %>%     dplyr::left_join(soil_columns %>%  dplyr::select(substanz_name, class_id, class_label)) %>%     dplyr::group_by(scen, treatment, soil_depth, irrigation_intervall, duration, irrigation_period, class_id, class_label) %>%     dplyr::summarise(dplyr::across(c(sum_cv_top, sum_cv_bot), ~abs(sum(.x, na.rm = TRUE))),                      number_of_substances = dplyr::n()) %>%     dplyr::mutate(scenario_label = dplyr::case_when(        scen == \"ablauf_ka_median_soil-2m_irrig-10days\" & duration == \"long\" & irrigation_period == \"irrig-period_status-quo\" ~ \"Status Quo\",        scen == \"ablauf_ka_median_soil-2m_irrig-10days\" & duration == \"long_wet\" & irrigation_period == \"irrig-period_status-quo\" ~ \"Klima, feucht\",        scen == \"ablauf_ka_median_soil-2m_irrig-10days\" & duration == \"long_dry\" & irrigation_period == \"irrig-period_status-quo\" ~ \"Klima, trocken\",        scen == \"ablauf_ka_median_soil-2m_irrig-10days\" & duration == \"long\" & irrigation_period == \"irrig-period_growing-season\" ~ \"Bewässerung (nur Mai-Sep)\",        scen == \"ablauf_o3_median_soil-2m_irrig-10days\" & duration == \"long\" & irrigation_period == \"irrig-period_status-quo\" ~ \"Ozone-UV\",        scen == \"ablauf_ka_median_soil-1m_irrig-10days\" & duration == \"long\" & irrigation_period == \"irrig-period_status-quo\" ~ \"Boden, 1 m\",        scen == \"ablauf_ka_median_soil-3m_irrig-10days\" & duration == \"long\" & irrigation_period == \"irrig-period_status-quo\" ~ \"Boden, 3 m\",        scen == \"ablauf_ka_median_soil-2m_irrig-01days\" & duration == \"long\" & irrigation_period == \"irrig-period_status-quo\" ~ \"Bewässerungsintervall, 1 Tag\",        .default = \"\"     ))    res_stats_df_class_selected <- res_stats_df_class %>%     dplyr::filter(scenario_label != \"\")    load_gw <- res_stats_df_class_selected %>%     dplyr::group_by(scenario_label) %>%     dplyr::summarise(total_sum_cv_bot = sum(sum_cv_bot))    load_default_per_class <- res_stats_df_class_selected %>%     dplyr::ungroup() %>%     dplyr::filter(scenario_label == \"Status Quo\") %>%     dplyr::group_by(class_label) %>%     dplyr::rename(default_class_sum_cv_top = sum_cv_top,                   default_class_sum_cv_bot = sum_cv_bot)  %>%     dplyr::summarize(default_class_sum_cv_top = sum(default_class_sum_cv_top),                      default_class_sum_cv_bot = sum(default_class_sum_cv_top))  %>%     dplyr::select(class_label, default_class_sum_cv_top, default_class_sum_cv_bot)      load_per_scenario_and_class <- res_stats_df_class %>%     dplyr::group_by(scenario_label, class_label) %>%     dplyr::rename(class_sum_cv_top = sum_cv_top,                   class_sum_cv_bot = sum_cv_bot)  %>%     dplyr::summarize(class_sum_cv_top = sum(class_sum_cv_top),                      class_sum_cv_bot = sum(class_sum_cv_bot))  %>%     dplyr::select(scenario_label, class_label, class_sum_cv_top, class_sum_cv_bot)      load_per_scenario <- res_stats_df_class %>%     dplyr::group_by(scenario_label) %>%     dplyr::rename(scenario_sum_cv_top = sum_cv_top,                   scenario_sum_cv_bot = sum_cv_bot)  %>%     dplyr::summarize(scenario_sum_cv_top = sum(scenario_sum_cv_top),                      scenario_sum_cv_bot = sum(scenario_sum_cv_bot))  %>%     dplyr::select(scenario_label, scenario_sum_cv_top, scenario_sum_cv_bot)      x_desired_order <- c(\"Status Quo\",                          \"Boden, 1 m\",                          \"Boden, 3 m\",                          \"Klima, trocken\",                          \"Klima, feucht\",                          \"Bewässerungsintervall, 1 Tag\",                          \"Bewässerung (nur Mai-Sep)\",                          \"Ozone-UV\"                          )          gg0 <- res_stats_df_class_selected %>%       dplyr::bind_cols(load_default_sum) %>%       dplyr::left_join( load_per_scenario_and_class) %>%       dplyr::mutate(percent_sum_cv_bot =  class_sum_cv_bot / default_sum_cv_top,                     percent_sum_cv_top =  class_sum_cv_top / default_sum_cv_top,                     percent_gw = percent_sum_cv_bot/percent_sum_cv_top) %>%       tidyr::pivot_longer(cols = tidyselect::starts_with(\"percent_sum\"),                           names_to = \"variable\",                           values_to = \"value\") %>%       dplyr::mutate(variable = dplyr::case_when(         variable == \"percent_sum_cv_bot\" ~ \"Grundwasser\",         variable == \"percent_sum_cv_top\" ~ \"Boden\",         .default = variable),         perc_gw = dplyr::if_else(variable == \"Grundwasser\",                                  100*percent_gw,                                  100 - 100*percent_gw)#,         # value = dplyr::if_else(variable == \"Grundwasser\",         #                          - value,         #                          value)       ) %>%       dplyr::left_join(load_gw) %>%       dplyr::left_join(load_per_scenario) %>%       ggplot2::ggplot(ggplot2::aes(fill = class_label,                                    group = variable,                                    y = value,                                    x = forcats::fct_relevel(scenario_label, x_desired_order))) +       ggplot2::labs(x = \"Szenario\",                     y = \"Gesamtfracht normiert auf den Status-Quo (%)\",                     fill = \"Stoffeintrag\",                     title = ifelse(retardation_short == \"retardation_no\",                                    \"ohne Retardation\",                                    \"mit Retardation\")) +       ggplot2::geom_bar(stat=\"identity\") +       ggplot2::facet_wrap(~ variable, scales = \"fixed\", ncol = 1) +       #ggplot2::scale_fill_manual(values = reversed_palette) +       ggplot2::scale_y_continuous(labels = scales::percent, breaks=seq(0, 1, 0.1), limits = c(0, 1.05)) +       ggplot2::geom_text(ggplot2::aes(label = dplyr::if_else(round(value*100, 0) == 0,                                                              \"\",                                                              sprintf(\"%2.1f %%\",  round(value*100, 1)))),                          position = ggplot2::position_stack(vjust = 0.5),                          size = 3, color = \"black\") +       ggplot2::theme_bw() +       ggplot2::theme(legend.position = \"top\")          # Extrahiere die Standardfarben von ggplot2     default_colors <- ggplot2::ggplot_build(gg0)$data[[1]]$fill          # Kehre die Reihenfolge der Farben um     reversed_colors <- rev(default_colors)          gg0 <- gg0 +       ggplot2::scale_fill_manual(values = reversed_colors)               png(sprintf(\"stoffeintrag_%s.png\", retardation_short),          width = 1200,          height = 800)     print(gg0)     dev.off()  })"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/articles/modelling_scenarios.html","id":"create-conservative-tracer-plots","dir":"Articles","previous_headings":"Post-Processing","what":"Create Conservative Tracer Plots","title":"Modelling with R: Scenario Analysis","text":"","code":"model_paths <- fs::dir_ls(     path =  root_dir ,     recurse = TRUE,     regexp = \"tracer$\",     type = \"directory\"   )      scenarios <- sapply(c(1,10), function(x) paste0(\"soil-\", 1:3, sprintf(\"m_irrig-%02ddays\", x))) %>%     as.vector()    ### read traveltimes sequential   # system.time(   # traveltimes_list <- lapply(model_paths, function(model_path) {   #   setNames(nm = (scenarios), lapply(scenarios, function(scenario) {   #     try({   #       message(sprintf(\"Scenario: %s\", scenario))   #       solute_files <- fs::dir_ls(   #         path = model_path,   #         recurse = TRUE,   #         regexp = sprintf(\"tracer_%s_.*vs/solute\\\\d\\\\d?.out\", scenario)   #       )   #       flextreat.hydrus1d::get_traveltimes(solute_files, dbg = TRUE)   #     })   #   }))   # }))      ### read traveltimes in parallel   library(future.apply)    # Set up parallel plan   system.time(expr = {   future::plan(future::multisession)    traveltimes_list <- future.apply::future_lapply(model_paths, function(model_path) {     setNames(nm = (scenarios), future.apply::future_lapply(scenarios, function(scenario) {       try({         message(sprintf(\"Scenario: %s\", scenario))         solute_files <- fs::dir_ls(           path = model_path,           recurse = TRUE,           regexp = sprintf(\"tracer_%s_.*vs/solute\\\\d\\\\d?.out\", scenario)         )         flextreat.hydrus1d::get_traveltimes(solute_files, dbg = TRUE)       })     }))   })   }   )    # Close the parallel plan   future::plan(future::sequential)   traveltimes_list_backup <-  traveltimes_list    sapply(seq_along(traveltimes_list), function(i) {      label <- sprintf(\"%s\", extrahiere_letzte_drei_teile(names(traveltimes_list)[i]))      htmlwidgets::saveWidget(flextreat.hydrus1d::plot_traveltimes(traveltimes_list[[i]] %>% dplyr::bind_rows(),                                                                  title = label ,                                                                  ylim = c(0,650)),                             file = sprintf(\"traveltimes_%s.html\", label))   })      jpeg(filename = \"verweilzeiten.jpeg\", height = 500, width = 1200, quality = 100)     #pdff <- \"traveltimes_all_percent_de.pdf\"     #kwb.utils::preparePdf(pdff)      traveltimes_df <- lapply(traveltimes_list, function(sublist) sublist %>% dplyr::bind_rows()) %>%       dplyr::bind_rows(.id = \"scenario_main_raw\") %>%       dplyr::mutate(         scenario_name = stringr::str_remove_all(model_name, \"_soil-column_.*vs$\") %>% stringr::str_remove_all(\"tracer_\"),         scenario_main =  scenario_main_raw %>% extrahiere_letzte_drei_teile() %>% stringr::str_remove(\"_tracer\") %>%           stringr::str_remove(\"irrig-period_\") %>% stringr::str_remove(\"_long\"),         quarter = lubridate::quarter(date) %>% as.factor(),         soil_depth =  stringr::str_extract(scenario_name, \"soil-.*m\") %>%           stringr::str_remove_all(\"soil-|m\") %>%  as.factor(),         irrigation_interval = stringr::str_extract(scenario_name, pattern = \"irrig.*\") %>% stringr::str_extract(\"[0-9]+\"),         label_x = sprintf(\"Bo%sBi%s\", soil_depth, irrigation_interval)         ) %>%       tidyr::separate(col = scenario_main, into = c(\"irrigation_period\", \"climate\"), sep = \"_\", remove = FALSE) %>%       dplyr::mutate(climate = dplyr::case_when(climate == \"wet\" ~ \"N835\",                                                climate == \"dry\" ~ \"N380\",                                                .default = \"N606\"),                     irrigation_period = dplyr::if_else(irrigation_period == \"growing-season\", \"B289\", \"B405\"),                     label_legend = sprintf(\"%s%s\", climate, irrigation_period))      scenario_base_median <- traveltimes_df %>%       dplyr::filter(         scenario_name == \"soil-2m_irrig-10days\",         scenario_main == \"status-quo\",         percentiles == 0.5       ) %>%       dplyr::select(- time_top, - time_bot) %>%       dplyr::rename(time_diff_base = time_diff)      traveltimes_bp <- traveltimes_df %>%       dplyr::filter(percentiles == 0.5) %>%       dplyr::left_join(scenario_base_median[, c(\"month_id\", \"time_diff_base\")] %>% dplyr::mutate(percentiles = 0.5)) %>%       dplyr::mutate(time_diff_percent = 100 + 100 * (time_diff - time_diff_base) / time_diff_base) %>%       dplyr::filter(!is.na(time_diff_percent))    # Plotting ---------------------------------------------------------------------    y_lim <- c(0,350)    tt_bp_percent <- traveltimes_bp %>%     ggplot2::ggplot(ggplot2::aes(x = forcats::fct_reorder(as.factor(label_x), time_diff_percent),                                  y = time_diff_percent,                                  col = label_legend)) +     ggplot2::geom_boxplot(outliers = FALSE) +     # ggplot2::geom_jitter(position = ggplot2::position_jitterdodge(     #   jitter.width = 0.1,     #   dodge.width = 0.75),     #   alpha = 0.6) +     ggplot2::ylim(y_lim) +     ggplot2::labs(y = \"Mittlere Verweilzeit (%) im Vergleich zu Status Quo\",                   x = \"Bodenmächtigkeit (m) und Bewässerungsintervall (Tage)\",                   col = \"Niederschlag und Bew\\u00E4sserung (mm/Jahr)\",                   title = \"\") +     ggplot2::theme_bw() +     ggplot2::theme(#legend.position=c(0.85,0.85),                    legend.box.just = \"left\",                    legend.direction = \"vertical\",                    legend.position = \"top\",                    legend.margin = ggplot2::margin(),                    legend.text = ggplot2::element_text(size = 14),# face = \"bold\"),  # Größer und dick                    legend.title = ggplot2::element_text(size = 15, face = \"bold\"),                    axis.text.x = ggplot2::element_text(size = 14, face = \"bold\"),                    axis.text.y = ggplot2::element_text(size = 14, face = \"bold\"),  # Größer und dick                    axis.title.x = ggplot2::element_text(size = 15, face = \"bold\"),  # Größer und dick                    axis.title.y = ggplot2::element_text(size = 15, face = \"bold\"),                    plot.title = ggplot2::element_text(size = 17, face = \"bold\"),                    plot.subtitle = ggplot2::element_text(size = 15) #,   # Größer und dick                    #plot.subtitle = ggplot2::element_text(size = 14, face = \"bold\")     ) +     ggplot2::guides(color = ggplot2::guide_legend(nrow = 1, byrow = FALSE))    print(tt_bp_percent)     #kwb.utils::finishAndShowPdf(pdff)   dev.off()"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Rustler. Author, maintainer. Hauke Sonnenberg. Contributor. . Funder. . Copyright holder.","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rustler M (2025). flextreat.hydrus1d: R Package Soil Water Balance Solute Transport Modelling Scenarios Project Flextreat. R package version 0.1.0, https://github.com/KWB-R/flextreat.hydrus1d.","code":"@Manual{,   title = {flextreat.hydrus1d: R Package for Soil Water Balance and Solute Transport Modelling Scenarios for Project Flextreat},   author = {Michael Rustler},   year = {2025},   note = {R package version 0.1.0},   url = {https://github.com/KWB-R/flextreat.hydrus1d}, }"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Package for Soil Water Balance and Solute Transport Modelling Scenarios for Project Flextreat","text":"details install KWB-R packages checkout installation tutorial.","code":"### Optionally: specify GitHub Personal Access Token (GITHUB_PAT) ### See here why this might be important for you: ### https://kwb-r.github.io/kwb.pkgbuild/articles/install.html#set-your-github_pat  # Sys.setenv(GITHUB_PAT = \"mysecret_access_token\")  # Install package \"remotes\" from CRAN if (! require(\"remotes\")) {   install.packages(\"remotes\", repos = \"https://cloud.r-project.org\") }  # Install KWB package 'flextreat.hydrus1d' from GitHub remotes::install_github(\"KWB-R/flextreat.hydrus1d\")"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 - 2025 Kompetenzzentrum Wasser Berlin gGmbH (KWB) Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/add_cBot_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: add cBot columns — add_cBot_columns","title":"Helper function: add cBot columns — add_cBot_columns","text":"Helper function: add cBot columns","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/add_cBot_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: add cBot columns — add_cBot_columns","text":"","code":"add_cBot_columns(data)"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/add_cBot_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: add cBot columns — add_cBot_columns","text":"data data frame","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/add_cBot_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: add cBot columns — add_cBot_columns","text":"data frame cBot columns","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/add_times.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: add times — add_times","title":"Helper function: add times — add_times","text":"Helper function: add times","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/add_times.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: add times — add_times","text":"","code":"add_times(df, sim_datetime_start = as.POSIXct(\"2017-05-01\", tz = \"UTC\"))"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/add_times.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: add times — add_times","text":"df df sim_datetime_start simulation start datetime object (default: .POSIXct(\"2017-05-01\", tz = \"UTC\"))","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/add_times.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: add times — add_times","text":"data frame added  times","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/aggregate_atmosphere.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Atmosphere — aggregate_atmosphere","title":"Aggregate Atmosphere — aggregate_atmosphere","text":"hydrologic years","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/aggregate_atmosphere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Atmosphere — aggregate_atmosphere","text":"","code":"aggregate_atmosphere(atm_selected, format = \"wide\")"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/aggregate_atmosphere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Atmosphere — aggregate_atmosphere","text":"atm_selected atm_selected retrieved prepare_atmosphere_data format \"wide\" \"long","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/aggregate_atmosphere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Atmosphere — aggregate_atmosphere","text":"aggregated data","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/aggregate_solute.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Solute — aggregate_solute","title":"Aggregate Solute — aggregate_solute","text":"Aggregate Solute","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/aggregate_solute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Solute — aggregate_solute","text":"","code":"aggregate_solute(   solute,   sim_datetime_start = as.POSIXct(\"2017-05-01\", tz = \"UTC\"),   col_aggr = \"date\" )"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/aggregate_solute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Solute — aggregate_solute","text":"solute solute retrieved read_solute sim_datetime_start simulation start datetime object (default: .POSIXct(\"2017-05-01\", tz = \"UTC\")) col_aggr column aggregated. One \"date\", \"yearmonth\", \"year\" \"year_hydrologic\" (default: \"date\")","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/aggregate_solute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Solute — aggregate_solute","text":"aggregated solute","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/aggregate_tlevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate t_level — aggregate_tlevel","title":"Aggregate t_level — aggregate_tlevel","text":"columns starting \"sum\" matching \"volume\"","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/aggregate_tlevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate t_level — aggregate_tlevel","text":"","code":"aggregate_tlevel(   t_level,   sim_datetime_start = as.POSIXct(\"2017-05-01\", tz = \"UTC\"),   col_aggr = \"date\" )"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/aggregate_tlevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate t_level — aggregate_tlevel","text":"t_level t_level retrieved read_tlevel sim_datetime_start simulation start datetime object (default: .POSIXct(\"2017-05-01\", tz = \"UTC\")) col_aggr column aggregated. One \"date\", \"yearmonth\", \"year\" \"year_hydrologic\" (default: \"date\")","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/aggregate_tlevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate t_level — aggregate_tlevel","text":"aggregated t_level data","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/combine_dataframes.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: combine dataframes — combine_dataframes","title":"Helper function: combine dataframes — combine_dataframes","text":"Helper function: combine dataframes","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/combine_dataframes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: combine dataframes — combine_dataframes","text":"","code":"combine_dataframes(df_list)"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/combine_dataframes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: combine dataframes — combine_dataframes","text":"df_list df_list","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/combine_dataframes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: combine dataframes — combine_dataframes","text":"df","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/copy_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: copy column — copy_column","title":"Helper function: copy column — copy_column","text":"Helper function: copy column","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/copy_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: copy column — copy_column","text":"","code":"copy_column(df, column, number_of_new_columns)"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/copy_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: copy column — copy_column","text":"df data fram column name colum copy number_of_new_columns number columns copied","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/copy_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: copy column — copy_column","text":"df copied column names","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/copy_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Helper function: copy column — copy_column","text":"","code":"# Beispiel-Tibble tb <- tibble::tibble( ID = 1:5, Wert = c(10, 20, 30, 40, 50) )  # Anwendung der Funktion tb_neu <- copy_column(tb, \"Wert\", 3) print(tb_neu) #> # A tibble: 5 × 5 #>      ID  Wert Wert_2 Wert_3 Wert_4 #>   <int> <dbl>  <dbl>  <dbl>  <dbl> #> 1     1    10     10     10     10 #> 2     2    20     20     20     20 #> 3     3    30     30     30     30 #> 4     4    40     40     40     40 #> 5     5    50     50     50     50"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/create_monthly_atm.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Atmospheric Data to Monthly Values — create_monthly_atm","title":"Aggregate Atmospheric Data to Monthly Values — create_monthly_atm","text":"Aggregate Atmospheric Data Monthly Values","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/create_monthly_atm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Atmospheric Data to Monthly Values — create_monthly_atm","text":"","code":"create_monthly_atm(atm = prepare_atmosphere_data())"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/create_monthly_atm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Atmospheric Data to Monthly Values — create_monthly_atm","text":"atm atm retrieved prepare_atmosphere_data","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/create_monthly_atm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Atmospheric Data to Monthly Values — create_monthly_atm","text":"tibble yearly atmospheric data values","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/create_monthly_atm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Atmospheric Data to Monthly Values — create_monthly_atm","text":"","code":"create_monthly_atm() #> # A tibble: 84 × 5 #>    date_end   rain_mm irrigation_groundwater_mm irrigation_clearwater_mm #>    <date>       <dbl>                     <dbl>                    <dbl> #>  1 2017-01-31    42.4                     0                          0   #>  2 2017-02-28    31.7                     0                         27.7 #>  3 2017-03-31    46.6                     0                         31.3 #>  4 2017-04-30    24.4                     0                         30.0 #>  5 2017-05-31    98.1                     0.237                     32.7 #>  6 2017-06-30   114.                      6.64                      44.6 #>  7 2017-07-31   138.                      0.381                     43.8 #>  8 2017-08-31    90.4                     0                         41.2 #>  9 2017-09-30    52.7                     0                         37.2 #> 10 2017-10-31    46.1                     0                         35.8 #> # ℹ 74 more rows #> # ℹ 1 more variable: potential_evaporation_mm <dbl>"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/evapo_p.html","id":null,"dir":"Reference","previous_headings":"","what":"DWD: Potential Evaporation, Daily — evapo_p","title":"DWD: Potential Evaporation, Daily — evapo_p","text":"Median daily potential evaporation irrigation area (.e. ~44km2), based 1x1km2 grids DWD. Downloaded read_daily_data_over_shape 2017-01-01 2020-12-31","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/evapo_p.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DWD: Potential Evaporation, Daily — evapo_p","text":"","code":"evapo_p"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/evapo_p.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"DWD: Potential Evaporation, Daily — evapo_p","text":"data.frame 1461 rows 10 variables: file name downloaded grid file source date date year year month month day day mean spatially averaged, mean sd spatially averaged, standard deviation min spatially averaged, min max spatially averaged, max n_values number grid-cells used spatial averaging","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/evapo_p.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DWD: Potential Evaporation, Daily — evapo_p","text":"","code":"if (FALSE) { # \\dontrun{ ### Data download remotes::install_github(\"kwb-r/kwb.dwd\") shape_file <- system.file(\"extdata/input-data/gis/Abwasserverregnungsgebiet.shp\", package = \"flextreat.hydrus1d\")  # Only data of full months can currently be read! evapo_p <- kwb.dwd::read_daily_data_over_shape( file = shape_file, variable = \"evapo_p\", from = \"201701\", to = \"202012\" )} # } head(flextreat.hydrus1d::evapo_p) #>                                       file       date year month day     mean #> 1 grids_germany_daily_evapo_p_20170501.asc 2017-05-01 2017     5   1 2.398051 #> 2 grids_germany_daily_evapo_p_20170502.asc 2017-05-02 2017     5   2 1.868663 #> 3 grids_germany_daily_evapo_p_20170503.asc 2017-05-03 2017     5   3 2.113928 #> 4 grids_germany_daily_evapo_p_20170504.asc 2017-05-04 2017     5   4 1.478253 #> 5 grids_germany_daily_evapo_p_20170505.asc 2017-05-05 2017     5   5 1.341413 #> 6 grids_germany_daily_evapo_p_20170506.asc 2017-05-06 2017     5   6 2.474103 #>          sd min max n_values #> 1 0.7951378 0.5 3.7   358303 #> 2 0.5679082 0.3 3.7   358303 #> 3 0.3613727 0.5 3.5   358303 #> 4 0.4204923 0.2 3.6   358303 #> 5 0.5454047 0.3 3.8   358303 #> 6 0.7092278 0.8 4.2   358303"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/get_hydrologic_years.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Hydrologic Years — get_hydrologic_years","title":"Get Hydrologic Years — get_hydrologic_years","text":"Get Hydrologic Years","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/get_hydrologic_years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Hydrologic Years — get_hydrologic_years","text":"","code":"get_hydrologic_years(datetime)"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/get_hydrologic_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Hydrologic Years — get_hydrologic_years","text":"datetime datetime string","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/get_hydrologic_years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Hydrologic Years — get_hydrologic_years","text":"integer vector hydrologic year","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/get_last_day_of_months.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: get last days of months — get_last_day_of_months","title":"Helper function: get last days of months — get_last_day_of_months","text":"Helper function: get last days months","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/get_last_day_of_months.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: get last days of months — get_last_day_of_months","text":"","code":"get_last_day_of_months(ids, date_start = \"2017-05-01\")"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/get_last_day_of_months.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: get last days of months — get_last_day_of_months","text":"ids vector ids date_start (default: \"2017-05-01\")","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/get_last_day_of_months.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: get last days of months — get_last_day_of_months","text":"last days month","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/get_traveltimes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get traveltimes (for conservative tracers) — get_traveltimes","title":"Get traveltimes (for conservative tracers) — get_traveltimes","text":"Get traveltimes (conservative tracers)","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/get_traveltimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get traveltimes (for conservative tracers) — get_traveltimes","text":"","code":"get_traveltimes(solute_files, dbg = TRUE)"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/get_traveltimes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get traveltimes (for conservative tracers) — get_traveltimes","text":"solute_files paths solute files, good naming convention monthly solute exposition (e.g. 0110, solute1: first month, solute10: tenth month simulation start) dbg debug messages (default: TRUE)","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/get_traveltimes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get traveltimes (for conservative tracers) — get_traveltimes","text":"tibble time substance top/bottom diff time. Note percentile relate substance load","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/interpolate_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function: interpolate time — interpolate_time","title":"Helper function: interpolate time — interpolate_time","text":"Helper function: interpolate time","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/interpolate_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function: interpolate time — interpolate_time","text":"","code":"interpolate_time(   solute,   percentiles = c(0.01, 0.05, 0.1, 0.25, 0.5, 0.75, 0.9, 0.95, 0.99) )"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/interpolate_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function: interpolate time — interpolate_time","text":"solute solute result tibble percentiles (default: c(0.01, 0.05, 0.1, 0.25,0.5, 0.75, 0.9, 0.95, 0.99))","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/interpolate_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function: interpolate time — interpolate_time","text":"tibble interpolated times percentiles","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/irrigation.html","id":null,"dir":"Reference","previous_headings":"","what":"Irrigation: Monthly — irrigation","title":"Irrigation: Monthly — irrigation","text":"Monthly irrigation values provided AVB (cubicmeters) downscaled daily values (dividing \"days_in_month\" normalised mm/squaremeter dividing assumed irrigation area (44111068 m2)","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/irrigation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Irrigation: Monthly — irrigation","text":"","code":"irrigation"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/irrigation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Irrigation: Monthly — irrigation","text":"data.frame 8835 rows 3 variables: year year month month days_in_month days month date_start date start date_end date end irrigation_area_sqm irrigation area squaremeter \"groundwater.mmPerDay irrigation using \"groundwater\" (mm/sqm) \"clearwater.mmPerDay irrigation using \"clearwater\" (mm/sqm)","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/irrigation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Irrigation: Monthly — irrigation","text":"","code":"if (FALSE) { # \\dontrun{ install.packages(c(\"dplyr\", \"tidyr\")) irrigation_file <- system.file(\"extdata/input-data/Beregnungsmengen_AVB.csv\", package = \"flextreat.hydrus1d\")  # irrigation_area <- rgdal::readOGR(dsn = shape_file) # irrigation_area_sqm <- irrigation_area$area  # 44111068m2  ## 2700ha (https://www.abwasserverband-bs.de/de/was-wir-machen/verregnung/) irrigation_area_sqm <- 27000000  irrigation <- read.csv2(irrigation_file) %>%   dplyr::select(- .data$Monat) %>%   dplyr::rename(irrigation_m3 = .data$Menge_m3,                 source = .data$Typ,                 month = .data$Monat_num,                 year = .data$Jahr) %>%   dplyr::mutate(date_start = as.Date(sprintf(\"%d-%02d-01\",                                              .data$year,                                              .data$month)),                 days_in_month = as.numeric(lubridate::days_in_month(.data$date_start)),                 date_end =  as.Date(sprintf(\"%d-%02d-%02d\",                                             .data$year,                                             .data$month,                                             .data$days_in_month)),                 source = kwb.utils::multiSubstitute(.data$source,                                                     replacements = list(\"Grundwasser\" = \"groundwater.mmPerDay\",                                                                         \"Klarwasser\" = \"clearwater.mmPerDay\")),                 irrigation_cbmPerDay = .data$irrigation_m3/.data$days_in_month,                 irrigation_area_sqm = irrigation_area_sqm,                 irrigation_mmPerDay = 1000*irrigation_cbmPerDay/irrigation_area_sqm) %>%   dplyr::select(.data$year,                 .data$month,                 .data$days_in_month,                 .data$date_start,                 .data$date_end,                 .data$source,                 .data$irrigation_mmPerDay,                 .data$irrigation_area_sqm) %>%   tidyr::pivot_wider(names_from = .data$source,                      values_from = .data$irrigation_mmPerDay) } # } head(flextreat.hydrus1d::irrigation) #> # A tibble: 6 × 8 #>    year month days_in_month date_start date_end   irrigation_area_sqm #>   <int> <int>         <dbl> <date>     <date>                   <dbl> #> 1  2017     1            31 2017-01-01 2017-01-31            27000000 #> 2  2017     2            28 2017-02-01 2017-02-28            27000000 #> 3  2017     3            31 2017-03-01 2017-03-31            27000000 #> 4  2017     4            30 2017-04-01 2017-04-30            27000000 #> 5  2017     5            31 2017-05-01 2017-05-31            27000000 #> 6  2017     6            30 2017-06-01 2017-06-30            27000000 #> # ℹ 2 more variables: groundwater.mmPerDay <dbl>, clearwater.mmPerDay <dbl>"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/materials.html","id":null,"dir":"Reference","previous_headings":"","what":"Materials — materials","title":"Materials — materials","text":"dataset containing hydraulic soil characteristics Hydrus1D GUI database","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/materials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Materials — materials","text":"","code":"materials"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/materials.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Materials — materials","text":"data frame 12 rows 7 variables: material_name Name soil Qr Residual soil water content Qs Saturated soil water content Alpha Parameter soil water retention function (L-1, : cm) n Parameter n soil water retention function Ks Saturated hydraulic conductivity (unit: LT-1, : cm/day) Tortuosity parameter conductivity function (-)","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/materials.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Materials — materials","text":"Hydrus1D GUI -> Soil Hydraulic Properties (Pre-Processing Menu, Water Flow Submenu)","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/materials.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Materials — materials","text":"","code":"materials #> # A tibble: 12 × 7 #>    material_name      Qr    Qs Alpha     n     Ks     I #>    <chr>           <dbl> <dbl> <dbl> <dbl>  <dbl> <dbl> #>  1 sand            0.045  0.43 0.145  2.68 713.     0.5 #>  2 loamy sand      0.057  0.41 0.124  2.28 350.     0.5 #>  3 sandy loam      0.065  0.41 0.075  1.89 106.     0.5 #>  4 loam            0.078  0.43 0.036  1.56  25.0    0.5 #>  5 sillt           0.034  0.46 0.016  1.37   6      0.5 #>  6 silt loam       0.067  0.45 0.02   1.41  10.8    0.5 #>  7 sandy clay loam 0.1    0.39 0.059  1.48  31.4    0.5 #>  8 clay loam       0.095  0.41 0.019  1.31   6.24   0.5 #>  9 silty clay loam 0.089  0.43 0.01   1.23   1.68   0.5 #> 10 sandy clay      0.1    0.38 0.027  1.23   2.88   0.5 #> 11 silty clay      0.07   0.36 0.005  1.09   0.48   0.5 #> 12 clay loam       0.068  0.38 0.008  1.09   4.8    0.5"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_atmosphere.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Atmosphere — plot_atmosphere","title":"Plot Atmosphere — plot_atmosphere","text":"Plot Atmosphere","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_atmosphere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Atmosphere — plot_atmosphere","text":"","code":"plot_atmosphere(atm_selected_hydro_long)"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_atmosphere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Atmosphere — plot_atmosphere","text":"atm_selected_hydro_long retrieved aggregate_atmosphere \"long\" format","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_atmosphere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Atmosphere — plot_atmosphere","text":"plot atmosphere","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_monthly_atm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Monthly Atmospheric Data — plot_monthly_atm","title":"Plot Monthly Atmospheric Data — plot_monthly_atm","text":"Plot Monthly Atmospheric Data","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_monthly_atm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Monthly Atmospheric Data — plot_monthly_atm","text":"","code":"plot_monthly_atm()"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_monthly_atm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Monthly Atmospheric Data — plot_monthly_atm","text":"plot monthly atmospheric data","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_monthly_atm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Monthly Atmospheric Data — plot_monthly_atm","text":"","code":"plot_monthly_atm() #> Warning: Removed 4 rows containing missing values or values outside the scale range #> (`geom_point()`)."},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_solute.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Solute — plot_solute","title":"Plot Solute — plot_solute","text":"Plot Solute","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_solute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Solute — plot_solute","text":"","code":"plot_solute(solute_aggr, y_label = \"Share of 'clearwater' (%)\")"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_solute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Solute — plot_solute","text":"solute_aggr solute_aggr retrieved aggregate_solute y_label y_label (default: \"Share 'clearwater' (%)\")","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_solute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Solute — plot_solute","text":"plot solute","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_traveltimes.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot traveltimes — plot_traveltimes","title":"Plot traveltimes — plot_traveltimes","text":"Plot traveltimes","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_traveltimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot traveltimes — plot_traveltimes","text":"","code":"plot_traveltimes(solute_travel, title = \"\", ylim = NULL)"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_traveltimes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot traveltimes — plot_traveltimes","text":"solute_travel tibble retrieved get_traveltimes title optional title (default: \"\") ylim optional ylim (default: NULL)","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_traveltimes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot traveltimes — plot_traveltimes","text":"plotly traveltimes different percentiles","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_waterbalance.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Water Balance — plot_waterbalance","title":"Plot Water Balance — plot_waterbalance","text":"Plot Water Balance","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_waterbalance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Water Balance — plot_waterbalance","text":"","code":"plot_waterbalance(   tlevel_aggr,   y_label = \"Water Balance Component\",   unit_org = \"cm\",   unit_target = \"mm\" )"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_waterbalance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Water Balance — plot_waterbalance","text":"tlevel_aggr aggregated t_level retrieved aggregate_tlevel y_label default: \"Water Balance Component (mm)\" unit_org original unit \"t_level\" (default: \"cm\") unit_target target unit plot (default: \"mm\")","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/plot_waterbalance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Water Balance — plot_waterbalance","text":"plot water balance","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/precipitation_daily.html","id":null,"dir":"Reference","previous_headings":"","what":"Precipitation: Daily — precipitation_daily","title":"Precipitation: Daily — precipitation_daily","text":"Hourly precipitation data downloaded DWD monitoring station Braunschweig (id = 662) 1997-10-22 2021-12-31, aggregated daily values within R","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/precipitation_daily.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Precipitation: Daily — precipitation_daily","text":"","code":"precipitation_daily"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/precipitation_daily.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Precipitation: Daily — precipitation_daily","text":"data.frame 8835 rows 3 variables: year year month month days_in_month days month date_start date start date_end date end irrigation_area_sqm irrigation area squaremeter \"groundwater.mmPerDay irrigation using \"groundwater\" (mm/sqm) \"clearwater.mmPerDay irrigation using \"clearwater\" (mm/sqm)","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/precipitation_daily.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Precipitation: Daily — precipitation_daily","text":"","code":"if (FALSE) { # \\dontrun{ install.packages(c(\"dplyr\", \"rdwd\")) library(dplyr) rdwd::updateRdwd() rdwd::findID(\"Braunschweig\") rdwd::selectDWD(name = \"Braunschweig\", res = \"daily\")  url_bs_rain <- rdwd::selectDWD(name = \"Braunschweig\",                               res = \"hourly\",                               var = \"precipitation\",                               per = \"historical\" )  bs_rain <- rdwd::dataDWD(url_bs_rain)  precipitation_hourly <- rdwd::dataDWD(url_bs_rain) %>%  dplyr::select(.data$MESS_DATUM, .data$R1) %>%  dplyr::rename(\"datetime\" = \"MESS_DATUM\",                \"precipitation_mm\" = \"R1\")  precipitation_daily <- precipitation_hourly %>%  dplyr::mutate(\"date\" = as.Date(datetime)) %>%  dplyr::group_by(date) %>%  dplyr::summarise(rain_mm = sum(precipitation_mm))  } # } head(flextreat.hydrus1d::precipitation_daily) #> # A tibble: 6 × 2 #>   date       rain_mm #>   <date>       <dbl> #> 1 1997-10-22     0   #> 2 1997-10-23     0.1 #> 3 1997-10-24     0.5 #> 4 1997-10-25     0.3 #> 5 1997-10-26     0   #> 6 1997-10-27     0"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/precipitation_hourly.html","id":null,"dir":"Reference","previous_headings":"","what":"Precipitation: Hourly — precipitation_hourly","title":"Precipitation: Hourly — precipitation_hourly","text":"Hourly precipitation data downloaded DWD monitoring station Braunschweig (id = 662) 1997-10-22 2021-12-31","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/precipitation_hourly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Precipitation: Hourly — precipitation_hourly","text":"","code":"precipitation_hourly"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/precipitation_hourly.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Precipitation: Hourly — precipitation_hourly","text":"data.frame 211629 rows 2 variables: datetime date time precipitation_mm precipitation mm","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/precipitation_hourly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Precipitation: Hourly — precipitation_hourly","text":"","code":"if (FALSE) { # \\dontrun{ install.packages(c(\"dplyr\", \"rdwd\")) library(dplyr) rdwd::updateRdwd() rdwd::findID(\"Braunschweig\") rdwd::selectDWD(name = \"Braunschweig\", res = \"daily\")  url_bs_rain <- rdwd::selectDWD(name = \"Braunschweig\",                               res = \"hourly\",                               var = \"precipitation\",                               per = \"historical\" )  bs_rain <- rdwd::dataDWD(url_bs_rain)  precipitation_hourly <- rdwd::dataDWD(url_bs_rain) %>%  dplyr::select(.data$MESS_DATUM, .data$R1) %>%  dplyr::rename(\"datetime\" = \"MESS_DATUM\",                \"precipitation_mm\" = \"R1\")  } # } head(flextreat.hydrus1d::precipitation_hourly) #>              datetime precipitation_mm #> 1 1997-10-22 14:00:00                0 #> 2 1997-10-22 17:00:00                0 #> 3 1997-10-22 18:00:00                0 #> 4 1997-10-22 19:00:00                0 #> 5 1997-10-22 20:00:00                0 #> 6 1997-10-22 21:00:00                0"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/prepare_atmosphere.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Atmosphere — prepare_atmosphere","title":"Prepare Atmosphere — prepare_atmosphere","text":"Prepares atmospheric input data structure required HYDRUS1D default uses conservative tracer irrigation source \"clearwater\" ( set 1) order track share cleaned wastewater system inflow rate (\"Prec\" column combined value irrigation using either \"groundwater\" \"clearwater\" real \"rainfall\").","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/prepare_atmosphere.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Atmosphere — prepare_atmosphere","text":"","code":"prepare_atmosphere(   atm,   conc_irrig_clearwater = 100,   conc_irrig_groundwater = 0,   conc_rain = 0,   defaults = kwb.hydrus1d::defaults_atmosphere() )"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/prepare_atmosphere.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Atmosphere — prepare_atmosphere","text":"atm atm retrieved prepare_atmosphere_data conc_irrig_clearwater substance concentration source \"clearwater\" used irrigation (default: 100, set source concentrations default 0 order calculate share \"clearwater\" infiltration groundwater) conc_irrig_groundwater substance concentration source \"groundwater\" used irrigation (default: 0) conc_rain substance concentration rainfall (default: 0) defaults defaults undefined parameterskwb.hydrus1d::defaults_atmosphere()","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/prepare_atmosphere.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Atmosphere — prepare_atmosphere","text":"tibble peoered","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/prepare_atmosphere.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Atmosphere — prepare_atmosphere","text":"","code":"atm <- prepare_atmosphere_data() atm_selected <- select_hydrologic_years(atm) prepare_atmosphere(atm_selected) #> # A tibble: 2,375 × 13 #>     tAtm  Prec rSoil rRoot hCritA    rB    hB    ht  tTop  tBot  Ampl  cTop #>    <int> <dbl> <dbl> <int>  <int> <int> <int> <int> <int> <int> <int> <dbl> #>  1     1 0.106 0.240     0 100000     0     0     0     0     0     0  99.3 #>  2     2 0.656 0.187     0 100000     0     0     0     0     0     0  16.1 #>  3     3 0.106 0.211     0 100000     0     0     0     0     0     0  99.3 #>  4     4 0.286 0.148     0 100000     0     0     0     0     0     0  36.8 #>  5     5 0.116 0.134     0 100000     0     0     0     0     0     0  90.7 #>  6     6 0.106 0.247     0 100000     0     0     0     0     0     0  99.3 #>  7     7 0.106 0.212     0 100000     0     0     0     0     0     0  99.3 #>  8     8 0.146 0.137     0 100000     0     0     0     0     0     0  72.1 #>  9     9 0.106 0.219     0 100000     0     0     0     0     0     0  99.3 #> 10    10 0.106 0.289     0 100000     0     0     0     0     0     0  99.3 #> # ℹ 2,365 more rows #> # ℹ 1 more variable: cBot <dbl>"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/prepare_atmosphere_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Atmospheric Data — prepare_atmosphere_data","title":"Prepare Atmospheric Data — prepare_atmosphere_data","text":"Prepare Atmospheric Data","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/prepare_atmosphere_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Atmospheric Data — prepare_atmosphere_data","text":"","code":"prepare_atmosphere_data()"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/prepare_atmosphere_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Atmospheric Data — prepare_atmosphere_data","text":"data frame atmospheric data Braunschweig","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/prepare_atmosphere_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Atmospheric Data — prepare_atmosphere_data","text":"","code":"atm <- prepare_atmosphere_data() atm #> # A tibble: 2,556 × 6 #>    date       irrigation_area_sqm groundwater.mmPerDay clearwater.mmPerDay #>    <date>                   <dbl>                <dbl>               <dbl> #>  1 2017-01-01            27000000                    0                   0 #>  2 2017-01-02            27000000                    0                   0 #>  3 2017-01-03            27000000                    0                   0 #>  4 2017-01-04            27000000                    0                   0 #>  5 2017-01-05            27000000                    0                   0 #>  6 2017-01-06            27000000                    0                   0 #>  7 2017-01-07            27000000                    0                   0 #>  8 2017-01-08            27000000                    0                   0 #>  9 2017-01-09            27000000                    0                   0 #> 10 2017-01-10            27000000                    0                   0 #> # ℹ 2,546 more rows #> # ℹ 2 more variables: rain_mm <dbl>, evapo_p_mean_mm <dbl>"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/recalculate_ctop_with_virtualstorage.html","id":null,"dir":"Reference","previous_headings":"","what":"Recalculate c_top with virtual storage — recalculate_ctop_with_virtualstorage","title":"Recalculate c_top with virtual storage — recalculate_ctop_with_virtualstorage","text":"Recalculate c_top virtual storage","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/recalculate_ctop_with_virtualstorage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recalculate c_top with virtual storage — recalculate_ctop_with_virtualstorage","text":"","code":"recalculate_ctop_with_virtualstorage(atm, tlevel, crit_v_top = -0.05)"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/recalculate_ctop_with_virtualstorage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recalculate c_top with virtual storage — recalculate_ctop_with_virtualstorage","text":"atm atmosphere time series data tlevel tlevel model output (use kwb.hydrus1d::read_tlevel) crit_v_top critical v_top rate (default: - 0.05)","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/recalculate_ctop_with_virtualstorage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recalculate c_top with virtual storage — recalculate_ctop_with_virtualstorage","text":"tibble modified c_top values order respect evaporation often larger compared precipitation","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/select_hydrologic_years.html","id":null,"dir":"Reference","previous_headings":"","what":"Select hydrologic years — select_hydrologic_years","title":"Select hydrologic years — select_hydrologic_years","text":"Select hydrologic years","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/select_hydrologic_years.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select hydrologic years — select_hydrologic_years","text":"","code":"select_hydrologic_years(atm = prepare_atmosphere_data())"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/select_hydrologic_years.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select hydrologic years — select_hydrologic_years","text":"atm atm retrieved prepare_atmosphere_data","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/select_hydrologic_years.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select hydrologic years — select_hydrologic_years","text":"select hydrologic years","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/reference/select_hydrologic_years.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select hydrologic years — select_hydrologic_years","text":"","code":"atm <- prepare_atmosphere_data() atm_selected <- select_hydrologic_years(atm) head(atm_selected) #> # A tibble: 6 × 6 #>   date       irrigation_area_sqm groundwater.mmPerDay clearwater.mmPerDay #>   <date>                   <dbl>                <dbl>               <dbl> #> 1 2017-05-01            27000000              0.00765                1.05 #> 2 2017-05-02            27000000              0.00765                1.05 #> 3 2017-05-03            27000000              0.00765                1.05 #> 4 2017-05-04            27000000              0.00765                1.05 #> 5 2017-05-05            27000000              0.00765                1.05 #> 6 2017-05-06            27000000              0.00765                1.05 #> # ℹ 2 more variables: rain_mm <dbl>, evapo_p_mean_mm <dbl> tail(atm_selected) #> # A tibble: 6 × 6 #>   date       irrigation_area_sqm groundwater.mmPerDay clearwater.mmPerDay #>   <date>                   <dbl>                <dbl>               <dbl> #> 1 2023-10-26            27000000                    0               0.838 #> 2 2023-10-27            27000000                    0               0.838 #> 3 2023-10-28            27000000                    0               0.838 #> 4 2023-10-29            27000000                    0               0.838 #> 5 2023-10-30            27000000                    0               0.838 #> 6 2023-10-31            27000000                    0               0.838 #> # ℹ 2 more variables: rain_mm <dbl>, evapo_p_mean_mm <dbl>"},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/news/index.html","id":"flextreathydrus1d-010-2022-11-17","dir":"Changelog","previous_headings":"","what":"flextreat.hydrus1d 0.1.0 2022-11-17","title":"flextreat.hydrus1d 0.1.0 2022-11-17","text":"Improvements Knowledge Exchange Project PU2R 2022-11-22 Reduce irrigation_area_sqm (closes #12) Improve documentation website Fix GitHub actions workflows","code":""},{"path":"https://kwb-r.github.io/flextreat.hydrus1d/news/index.html","id":"flextreathydrus1d-0009000-2022-10-05","dir":"Changelog","previous_headings":"","what":"flextreat.hydrus1d 0.0.0.9000 2022-10-05","title":"flextreat.hydrus1d 0.0.0.9000 2022-10-05","text":"Results presented @mrustl Flextreat Projektreffen 2022-10-05. Important Note: scenario status quo (.e. irrigation wrong, due overestimation irrigation area, see unresolved issue #12) Added R workflows two HYDRUS-1D model scenarios (status quo, .e. irrigation -irrigation) period 2017-05-01 - 2020-10-31 conservative transport (.e. tracing clearwater share). Presented Added NEWS.md file track changes package. see https://style.tidyverse.org/news.html writing good NEWS.md","code":""}]
